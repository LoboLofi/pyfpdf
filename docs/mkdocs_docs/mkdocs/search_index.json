{
    "docs": [
        {
            "location": "/index.html", 
            "text": "FPDF for Python\n\n\n\n\nPyFPDF\n is a library for PDF document generation under Python, ported from PHP (see \nFPDF\n: \"Free\"-PDF, a well-known PDFlib-extension replacement with many examples, scripts and derivatives).\n\n\nLatest Released Version: fpdf2==2.0.0 (May 4th, 2017)*  *  -\nCurrent Development Version: 2.0.1**\n\n\nMain features\n\n\n\n\nEasy to use (and easy to extend)\n\n\nSmall and compact code, useful for testing new features and teaching\n\n\nMany simple examples and scripts available in many languages\n\n\nPIL Integration for images (via Pillow)\n\n\nNo installation, no compilation or other libraries (DLLs) required\n\n\n\n\nThis repository is a fork of the library's \noriginal port by Max Pat\n, with the following enhancements:\n\n\n\n\nPython 2.7 to 3.5+ support\n\n\nUnicode\n (UTF-8) TrueType font subset embedding (Central European, Cyrillic, Greek, Baltic, Thai, Chinese, Japanese, Korean, Hindi and almost any other language in the world) *\nNew!\n  * based on \nsFPDF\n LGPL3 PHP version from \nIan Back\n\n\nImproved installers (Python wheel) support\n\n\nBarcode I2of5 and code39, QR code coming soon ...\n\n\nPNG, GIF and JPG support (including transparency and alpha channel) \nNew!\n\n\nExceptions support, other minor fixes, improvements and PEP8 code cleanups\n\n\nPort of the \nTutorial\n and \nReferenceManual\n  (Spanish translation available)\n\n\n\n\nFPDF original features:\n\n\n\n\nChoice of measurement unit, page format and margins\n\n\nPage header and footer management\n\n\nAutomatic page break\n\n\nAutomatic line break and text justification\n\n\nImage, colors and links support\n\n\nPage compression\n\n\nExtensive \nTutorial\n and complete online \ndocumentation\n\n\n\n\nInstallation\n\n\n\n\nUsing \nPyPI\n\n\nBecome super user if necessary: \nsudo su\n\n\npip install fpdf2\n\n\n\n\n\n\nFrom source:\n\n\nClone the repository: \ngit clone --depth 1 --branch master https://github.com/alexanderankin/pyfpdf.git\n\n\nOptional: Check out the version you want, \ngit tag -n\n\n\nThis will require Pillow and other dependencies to be satisfied, or it will download the sources of those and compile those. On ubuntu this requires the following header packages: \nsudo apt-get install libjpeg-dev libpython-dev zlib1g-dev # libpython3.3-dev #(if necessary)\n\n\nRun \npython setup.py install\n\n\n\n\n\n\n\n\nSupport\n\n\nFor community support, please feel free to file an \nissue\n. Please be sure to tag recently active maintainers from other issues, as the \nrepository of this library\n as of this writing is a fork and does not accept issues (only pull requests).", 
            "title": "Project Home"
        }, 
        {
            "location": "/index.html#fpdf-for-python", 
            "text": "PyFPDF  is a library for PDF document generation under Python, ported from PHP (see  FPDF : \"Free\"-PDF, a well-known PDFlib-extension replacement with many examples, scripts and derivatives).  Latest Released Version: fpdf2==2.0.0 (May 4th, 2017)*  *  - Current Development Version: 2.0.1**", 
            "title": "FPDF for Python"
        }, 
        {
            "location": "/index.html#main-features", 
            "text": "Easy to use (and easy to extend)  Small and compact code, useful for testing new features and teaching  Many simple examples and scripts available in many languages  PIL Integration for images (via Pillow)  No installation, no compilation or other libraries (DLLs) required   This repository is a fork of the library's  original port by Max Pat , with the following enhancements:   Python 2.7 to 3.5+ support  Unicode  (UTF-8) TrueType font subset embedding (Central European, Cyrillic, Greek, Baltic, Thai, Chinese, Japanese, Korean, Hindi and almost any other language in the world) * New!   * based on  sFPDF  LGPL3 PHP version from  Ian Back  Improved installers (Python wheel) support  Barcode I2of5 and code39, QR code coming soon ...  PNG, GIF and JPG support (including transparency and alpha channel)  New!  Exceptions support, other minor fixes, improvements and PEP8 code cleanups  Port of the  Tutorial  and  ReferenceManual   (Spanish translation available)   FPDF original features:   Choice of measurement unit, page format and margins  Page header and footer management  Automatic page break  Automatic line break and text justification  Image, colors and links support  Page compression  Extensive  Tutorial  and complete online  documentation", 
            "title": "Main features"
        }, 
        {
            "location": "/index.html#installation", 
            "text": "Using  PyPI  Become super user if necessary:  sudo su  pip install fpdf2    From source:  Clone the repository:  git clone --depth 1 --branch master https://github.com/alexanderankin/pyfpdf.git  Optional: Check out the version you want,  git tag -n  This will require Pillow and other dependencies to be satisfied, or it will download the sources of those and compile those. On ubuntu this requires the following header packages:  sudo apt-get install libjpeg-dev libpython-dev zlib1g-dev # libpython3.3-dev #(if necessary)  Run  python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/index.html#support", 
            "text": "For community support, please feel free to file an  issue . Please be sure to tag recently active maintainers from other issues, as the  repository of this library  as of this writing is a fork and does not accept issues (only pull requests).", 
            "title": "Support"
        }, 
        {
            "location": "/Tutorial/index.html", 
            "text": "Tutorial\n\n\nEspa\u00f1ol: \nTutorial-es\n\n\n\n\n\n\nTutorial\n\n\nMinimal Example\n\n\nHeader, footer, page break and image\n\n\nLine breaks and colors\n\n\nInstallation Notes\n\n\n\n\n\n\n\n\n\n\nMinimal Example\n\n\nLet's start with the classic example:\n\n\nfrom fpdf import FPDF\n\npdf = FPDF()\npdf.add_page()\npdf.set_font('Arial', 'B', 16)\npdf.cell(40, 10, 'Hello World!')\npdf.output('tuto1.pdf', 'F')\n\n\n\n\nDemo\n\n\nAfter including the library file, we create an FPDF object. The \n\nFPDF\n constructor is used here with the default values: \npages are in A4 portrait and the measure unit is millimeter. It could have been\nspecified explicitly with:\n\n\npdf = FPDF('P', 'mm', 'A4')\n\n\n\n\nIt is possible to use landscape (\nL\n), other page formats (such as \nLetter\n and\n \nLegal\n) and measure units (\npt\n, \ncm\n, \nin\n).\n\n\nThere is no page for the moment, so we have to add one with \n\nadd_page\n. The origin is at the upper-left corner and the\ncurrent position is by default placed at 1 cm from the borders; the margins can\nbe changed with \nset_margins\n.\n\n\nBefore we can print text, it is mandatory to select a font with \n\nset_font\n, otherwise the document would be invalid. We\nchoose Arial bold 16:\n\n\npdf.set_font('Arial', 'B', 16)\n\n\n\n\nWe could have specified italics with \nI\n, underlined with \nU\n or a regular font\nwith an empty string (or any combination). Note that the font size is given in\npoints, not millimeters (or another user unit); it is the only exception. The\nother standard fonts are \nTimes\n, \nCourier\n, \nSymbol\n and \nZapfDingbats\n.\n\n\nWe can now print a cell with \ncell\n. A cell is a rectangular\narea, possibly framed, which contains some text. It is output at the current\nposition. We specify its dimensions, its text (centered or aligned), if borders\nshould be drawn, and where the current position moves after it (to the right,\nbelow or to the beginning of the next line). To add a frame, we would do this:\n\n\npdf.cell(40, 10, 'Hello World!', 1)\n\n\n\n\nTo add a new cell next to it with centered text and go to the next line, we\nwould do:\n\n\npdf.cell(60, 10, 'Powered by FPDF.', 0, 1, 'C')\n\n\n\n\nRemark\n: the line break can also be done with \nln\n. This\nmethod allows to specify in addition the height of the break.\n\n\nFinally, the document is closed and sent to the browser with\n\noutput\n. We could have saved it in a file by passing the\ndesired file name.\n\n\nCaution\n: in case when the PDF is sent to the browser, nothing else must be\noutput, not before nor after (the least space or carriage return matters).\nIf you send some data before, you will get the error message: \"Some data has\nalready been output to browser, can't send PDF file\". If you send after, your\nbrowser may display a blank page.\n\n\nHeader, footer, page break and image\n\n\nHere is a two page example with header, footer and logo:\n\n\nfrom fpdf import FPDF\n\nclass PDF(FPDF):\n    def header(self):\n        # Logo\n        self.image('logo_pb.png', 10, 8, 33)\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Move to the right\n        self.cell(80)\n        # Title\n        self.cell(30, 10, 'Title', 1, 0, 'C')\n        # Line break\n        self.ln(20)\n\n    # Page footer\n    def footer(self):\n        # Position at 1.5 cm from bottom\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Page number\n        self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C')\n\n# Instantiation of inherited class\npdf = PDF()\npdf.alias_nb_pages()\npdf.add_page()\npdf.set_font('Times', '', 12)\nfor i in range(1, 41):\n    pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1)\npdf.output('tuto2.pdf', 'F')\n\n\n\n\nDemo\n\n\nThis example makes use of the \nheader\n and \n\nfooter\n methods to process page headers and footers. They\nare called automatically. They already exist in the FPDF class but do nothing,\ntherefore we have to extend the class and override them.\n\n\nThe logo is printed with the \nimage\n method by specifying\nits upper-left corner and its width. The height is calculated automatically to\nrespect the image proportions.\n\n\nTo print the page number, a null value is passed as the cell width. It means\nthat the cell should extend up to the right margin of the page; it is handy to\ncenter text. The current page number is returned by\nthe \npage_no\n method; as for\nthe total number of pages, it is obtained by means of the special value \n{nb}\n\nwhich will be substituted on document closure (provided you first called \n\nalias_nb_pages\n).\nNote the use of the \nset_y\n method which allows to set\nposition at an absolute location in the page, starting from the top or the\nbottom.\n\n\nAnother interesting feature is used here: the automatic page breaking. As soon\nas a cell would cross a limit in the page (at 2 centimeters from the bottom by\ndefault), a break is performed and the font restored. Although the header and\nfooter select their own font (\nArial\n), the body continues with \nTimes\n. This\nmechanism of automatic restoration also applies to colors and line width. The\nlimit which triggers page breaks can be set with \n\nset_auto_page_break\n.\n\n\nLine breaks and colors\n\n\nLet's continue with an example which prints justified paragraphs. It also\nillustrates the use of colors.\n\n\nfrom fpdf import FPDF\n\ntitle = '20000 Leagues Under the Seas'\n\nclass PDF(FPDF):\n    def header(self):\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Calculate width of title and position\n        w = self.get_string_width(title) + 6\n        self.set_x((210 - w) / 2)\n        # Colors of frame, background and text\n        self.set_draw_color(0, 80, 180)\n        self.set_fill_color(230, 230, 0)\n        self.set_text_color(220, 50, 50)\n        # Thickness of frame (1 mm)\n        self.set_line_width(1)\n        # Title\n        self.cell(w, 9, title, 1, 1, 'C', 1)\n        # Line break\n        self.ln(10)\n\n    def footer(self):\n        # Position at 1.5 cm from bottom\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Text color in gray\n        self.set_text_color(128)\n        # Page number\n        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')\n\n    def chapter_title(self, num, label):\n        # Arial 12\n        self.set_font('Arial', '', 12)\n        # Background color\n        self.set_fill_color(200, 220, 255)\n        # Title\n        self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1)\n        # Line break\n        self.ln(4)\n\n    def chapter_body(self, name):\n        # Read text file\n        with open(name, 'rb') as fh:\n            txt = fh.read().decode('latin-1')\n        # Times 12\n        self.set_font('Times', '', 12)\n        # Output justified text\n        self.multi_cell(0, 5, txt)\n        # Line break\n        self.ln()\n        # Mention in italics\n        self.set_font('', 'I')\n        self.cell(0, 5, '(end of excerpt)')\n\n    def print_chapter(self, num, title, name):\n        self.add_page()\n        self.chapter_title(num, title)\n        self.chapter_body(name)\n\npdf = PDF()\npdf.set_title(title)\npdf.set_author('Jules Verne')\npdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt')\npdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt')\npdf.output('tuto3.pdf', 'F')\n\n\n\n\nDemo\n\n\nThe \nget_string_width\n method allows determining\nthe length of a string in the current font, which is used here to calculate the\nposition and the width of the frame surrounding the title. Then colors are set\n(via \nset_draw_color\n, \n\nset_fill_color\n and \n\nset_text_color\n) and the thickness of the line is set\nto 1 mm (against 0.2 by default) with\n\nset_line_width\n. Finally, we output the cell (the\nlast parameter to true indicates that the background must be filled).\n\n\nThe method used to print the paragraphs is \nmulti_cell\n.\nEach time a line reaches the right extremity of the cell or a carriage return\ncharacter is met, a line break is issued and a new cell automatically created\nunder the current one. Text is justified by default.\n\n\nTwo document properties are defined: the title \n(\nset_title\n) and the author \n(\nset_author\n). Properties can be viewed by two means.\nFirst is to open the document directly with Acrobat Reader, go to the File menu\nand choose the Document Properties option. The second, also available from the\nplug-in, is to right-click and select Document Properties.\n\n\nInstallation Notes\n\n\nPreviously, to import the object you should use the pyfpdf package:\n\n\nfrom pyfpdf import FPDF\n\n\n\n\nAfter version 1.7, to import it you should use the fpdf package:\n\n\nfrom fpdf import FPDF", 
            "title": "Tutorial"
        }, 
        {
            "location": "/Tutorial/index.html#tutorial", 
            "text": "Espa\u00f1ol:  Tutorial-es    Tutorial  Minimal Example  Header, footer, page break and image  Line breaks and colors  Installation Notes", 
            "title": "Tutorial"
        }, 
        {
            "location": "/Tutorial/index.html#minimal-example", 
            "text": "Let's start with the classic example:  from fpdf import FPDF\n\npdf = FPDF()\npdf.add_page()\npdf.set_font('Arial', 'B', 16)\npdf.cell(40, 10, 'Hello World!')\npdf.output('tuto1.pdf', 'F')  Demo  After including the library file, we create an FPDF object. The  FPDF  constructor is used here with the default values: \npages are in A4 portrait and the measure unit is millimeter. It could have been\nspecified explicitly with:  pdf = FPDF('P', 'mm', 'A4')  It is possible to use landscape ( L ), other page formats (such as  Letter  and\n  Legal ) and measure units ( pt ,  cm ,  in ).  There is no page for the moment, so we have to add one with  add_page . The origin is at the upper-left corner and the\ncurrent position is by default placed at 1 cm from the borders; the margins can\nbe changed with  set_margins .  Before we can print text, it is mandatory to select a font with  set_font , otherwise the document would be invalid. We\nchoose Arial bold 16:  pdf.set_font('Arial', 'B', 16)  We could have specified italics with  I , underlined with  U  or a regular font\nwith an empty string (or any combination). Note that the font size is given in\npoints, not millimeters (or another user unit); it is the only exception. The\nother standard fonts are  Times ,  Courier ,  Symbol  and  ZapfDingbats .  We can now print a cell with  cell . A cell is a rectangular\narea, possibly framed, which contains some text. It is output at the current\nposition. We specify its dimensions, its text (centered or aligned), if borders\nshould be drawn, and where the current position moves after it (to the right,\nbelow or to the beginning of the next line). To add a frame, we would do this:  pdf.cell(40, 10, 'Hello World!', 1)  To add a new cell next to it with centered text and go to the next line, we\nwould do:  pdf.cell(60, 10, 'Powered by FPDF.', 0, 1, 'C')  Remark : the line break can also be done with  ln . This\nmethod allows to specify in addition the height of the break.  Finally, the document is closed and sent to the browser with output . We could have saved it in a file by passing the\ndesired file name.  Caution : in case when the PDF is sent to the browser, nothing else must be\noutput, not before nor after (the least space or carriage return matters).\nIf you send some data before, you will get the error message: \"Some data has\nalready been output to browser, can't send PDF file\". If you send after, your\nbrowser may display a blank page.", 
            "title": "Minimal Example"
        }, 
        {
            "location": "/Tutorial/index.html#header-footer-page-break-and-image", 
            "text": "Here is a two page example with header, footer and logo:  from fpdf import FPDF\n\nclass PDF(FPDF):\n    def header(self):\n        # Logo\n        self.image('logo_pb.png', 10, 8, 33)\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Move to the right\n        self.cell(80)\n        # Title\n        self.cell(30, 10, 'Title', 1, 0, 'C')\n        # Line break\n        self.ln(20)\n\n    # Page footer\n    def footer(self):\n        # Position at 1.5 cm from bottom\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Page number\n        self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C')\n\n# Instantiation of inherited class\npdf = PDF()\npdf.alias_nb_pages()\npdf.add_page()\npdf.set_font('Times', '', 12)\nfor i in range(1, 41):\n    pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1)\npdf.output('tuto2.pdf', 'F')  Demo  This example makes use of the  header  and  footer  methods to process page headers and footers. They\nare called automatically. They already exist in the FPDF class but do nothing,\ntherefore we have to extend the class and override them.  The logo is printed with the  image  method by specifying\nits upper-left corner and its width. The height is calculated automatically to\nrespect the image proportions.  To print the page number, a null value is passed as the cell width. It means\nthat the cell should extend up to the right margin of the page; it is handy to\ncenter text. The current page number is returned by\nthe  page_no  method; as for\nthe total number of pages, it is obtained by means of the special value  {nb} \nwhich will be substituted on document closure (provided you first called  alias_nb_pages ).\nNote the use of the  set_y  method which allows to set\nposition at an absolute location in the page, starting from the top or the\nbottom.  Another interesting feature is used here: the automatic page breaking. As soon\nas a cell would cross a limit in the page (at 2 centimeters from the bottom by\ndefault), a break is performed and the font restored. Although the header and\nfooter select their own font ( Arial ), the body continues with  Times . This\nmechanism of automatic restoration also applies to colors and line width. The\nlimit which triggers page breaks can be set with  set_auto_page_break .", 
            "title": "Header, footer, page break and image"
        }, 
        {
            "location": "/Tutorial/index.html#line-breaks-and-colors", 
            "text": "Let's continue with an example which prints justified paragraphs. It also\nillustrates the use of colors.  from fpdf import FPDF\n\ntitle = '20000 Leagues Under the Seas'\n\nclass PDF(FPDF):\n    def header(self):\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Calculate width of title and position\n        w = self.get_string_width(title) + 6\n        self.set_x((210 - w) / 2)\n        # Colors of frame, background and text\n        self.set_draw_color(0, 80, 180)\n        self.set_fill_color(230, 230, 0)\n        self.set_text_color(220, 50, 50)\n        # Thickness of frame (1 mm)\n        self.set_line_width(1)\n        # Title\n        self.cell(w, 9, title, 1, 1, 'C', 1)\n        # Line break\n        self.ln(10)\n\n    def footer(self):\n        # Position at 1.5 cm from bottom\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Text color in gray\n        self.set_text_color(128)\n        # Page number\n        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')\n\n    def chapter_title(self, num, label):\n        # Arial 12\n        self.set_font('Arial', '', 12)\n        # Background color\n        self.set_fill_color(200, 220, 255)\n        # Title\n        self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1)\n        # Line break\n        self.ln(4)\n\n    def chapter_body(self, name):\n        # Read text file\n        with open(name, 'rb') as fh:\n            txt = fh.read().decode('latin-1')\n        # Times 12\n        self.set_font('Times', '', 12)\n        # Output justified text\n        self.multi_cell(0, 5, txt)\n        # Line break\n        self.ln()\n        # Mention in italics\n        self.set_font('', 'I')\n        self.cell(0, 5, '(end of excerpt)')\n\n    def print_chapter(self, num, title, name):\n        self.add_page()\n        self.chapter_title(num, title)\n        self.chapter_body(name)\n\npdf = PDF()\npdf.set_title(title)\npdf.set_author('Jules Verne')\npdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt')\npdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt')\npdf.output('tuto3.pdf', 'F')  Demo  The  get_string_width  method allows determining\nthe length of a string in the current font, which is used here to calculate the\nposition and the width of the frame surrounding the title. Then colors are set\n(via  set_draw_color ,  set_fill_color  and  set_text_color ) and the thickness of the line is set\nto 1 mm (against 0.2 by default) with set_line_width . Finally, we output the cell (the\nlast parameter to true indicates that the background must be filled).  The method used to print the paragraphs is  multi_cell .\nEach time a line reaches the right extremity of the cell or a carriage return\ncharacter is met, a line break is issued and a new cell automatically created\nunder the current one. Text is justified by default.  Two document properties are defined: the title \n( set_title ) and the author \n( set_author ). Properties can be viewed by two means.\nFirst is to open the document directly with Acrobat Reader, go to the File menu\nand choose the Document Properties option. The second, also available from the\nplug-in, is to right-click and select Document Properties.", 
            "title": "Line breaks and colors"
        }, 
        {
            "location": "/Tutorial/index.html#installation-notes", 
            "text": "Previously, to import the object you should use the pyfpdf package:  from pyfpdf import FPDF  After version 1.7, to import it you should use the fpdf package:  from fpdf import FPDF", 
            "title": "Installation Notes"
        }, 
        {
            "location": "/Tutorial-es/index.html", 
            "text": "\ufeffLos diferentes ejemplos muestran rapidamente como usar PyFPDF. Encontrar\u00e1 todas las caracter\u00edsticas principales explicadas.\n\n\nEnglish: \nTutorial\n\n\n\n\n\n\nEjemplo M\u00ednimo\n\n\nEncabezado, pie de p\u00e1gina, salto de p\u00e1gina e im\u00e1gen\n\n\nSaltos de l\u00ednea y colores\n\n\nNotas de instalaci\u00f3n\n\n\n\n\n\n\nEjemplo M\u00ednimo\n\n\nEmpecemos con el ejemplo cl\u00e1sico: \n\n\nfrom fpdf import FPDF\n\npdf = FPDF()\npdf.add_page()\npdf.set_font('Arial', 'B', 16)\npdf.cell(40, 10, 'Hola Mundo!')\npdf.output('tuto1.pdf', 'F')\n\n\n\n\nDemo\n\n\nLuego de incluir la biblioteca, creamos un objeto FPDF. El constructor \nFPDF\n es usado aqui con los valores predeterminados: p\u00e1ginas en A4 portrait -vertical- y la unidad de medida en milimetros. Podr\u00eda haberlos especificado explicitamente: \n\n\npdf=FPDF('P', 'mm', 'A4')\n\n\n\n\nEs posible usar landscape -apaisado- (L), otros formatos de p\u00e1gina (como Letter -carta- y Legal -oficio-) y \u00fanidad de medida (pt, cm, in). \n\n\nPor el momento no hay una p\u00e1gina, entonces tenemos que agregar una con \nadd_page\n. El origen es la esquina superior-izquierda y la posici\u00f3n actual est\u00e1 ubicada a 1 cm de los bordes; los margenes pueden ser cambiados con \nset_margins\n. \n\n\nAntes de que pod\u00e1mos imprimir texto, es obligatorio seleccionar una fuente con \nset_font\n, de lo contrario el documento ser\u00e1 inv\u00e1lido. Elegimos Arial bold 16: \n\n\npdf.set_font('Arial', 'B', 16)\n\n\n\n\nPodr\u00edamos haber especificado italic -cursiva- con I, underline -subrayado- con U o fuente regular con string vacio (o cualquier combinaci\u00f3n). Noar que el tama\u00f1o de la fuente es dado en puntos, no milimetros (u otra unidad de medida del usuario); esta es la \u00fanica excepci\u00f3n. Las otras fuentes est\u00e1ndar son Times, Courier, Symbol y ZapfDingbats. \n\n\nPodemos ahora imprimir una celda con \ncell\n. Una celda es un \u00e1rea rectangular, posiblemente enmarcada, que contiene alg\u00fan texto. Se imprime en la posici\u00f3n actual. Especificamos sus dimensiones, su texto (centrado o alineado), si los bordes deber\u00edan ser dibujados, y donde la posici\u00f3n actual se mueve despu\u00e9s (a la derecha, abajo o al principio de la pr\u00f3xima linea). Para agregar un marco, haremos: \n\n\npdf.cell(40, 10, 'Hola mundo !', 1)\n\n\n\n\nPara agregar una nueva celda pr\u00f3xima a ella con texto centrada y luego ir a la siguiente l\u00ednea, har\u00edamos: \n\n\npdf.cell(60, 10, 'Hecho con FPDF.', 0, 1, 'C')\n\n\n\n\nNota\n: el salto de l\u00ednea puede hacerse tambi\u00e9n con \nln\n. Este m\u00e9todo permite especificar adicionalmente la altura del salto. \n\n\nFinalmente, el documento es cerrado y enviado al explorador con \noutput\n. Podemos haberlo grabado a un fichero al pasarle el nombre de archivo. \n\n\nPrecauci\u00f3n\n: en caso cuando el PDF es enviado al explorador, nada m\u00e1s debe ser envi\u00e1do a la salida, ni antes ni despu\u00e9s (el m\u00ednimo caracter importa). \n\n\nEncabezado, pie de p\u00e1gina, salto de p\u00e1gina e im\u00e1gen\n\n\nAqu\u00ed hay un ejemplo de dos p\u00e1ginas con encabezado, pie y logo: \n\n\nfrom fpdf import FPDF\n\nclass PDF(FPDF):\n    def header(self):\n        # Logo\n        self.image('logo_pb.png', 10, 8, 33)\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Move to the right\n        self.cell(80)\n        # Title\n        self.cell(30, 10, 'Title', 1, 0, 'C')\n        # Line break\n        self.ln(20)\n\n    # Page footer\n    def footer(self):\n        # Position at 1.5 cm from bottom\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Page number\n        self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C')\n\n# Instantiation of inherited class\npdf = PDF()\npdf.alias_nb_pages()\npdf.add_page()\npdf.set_font('Times', '', 12)\nfor i in range(1, 41):\n    pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1)\npdf.output('tuto2.pdf', 'F')\n\n\n\n\nDemo\n\n\nEste ejemplo hace uso de m\u00e9todos  \nheader\n y  \nfooter\n para procesar el encabezado y pie. Son llamados autom\u00e1ticamente. Ya existen en la clase FPDF pero no hacen nada, por lo tanto tenemos que extender la clase y sobreescribirlos. \n\n\nEl log es impreso con el m\u00e9todo \nimage\n especificando su esquina superior izquierda y su ancho. La altura es calculada autom\u00e1ticamente para respetar las proporciones de la im\u00e1gen. \n\n\nPara imprimir el n\u00famero de p\u00e1gina, un valor nulo es pasado como ancho de celda. Significa que la celda deber\u00e1 ser extendida hasta el margen derecho de la p\u00e1gina; es \u00fatil centrar texto. El n\u00famero de p\u00e1gina actual es devuelto por  el m\u00e9todo \npage_no\n; y para el n\u00famero total de p\u00e1ginas, ser\u00e1 obtenido mediante el valor especial {nb} que ser\u00e1 sustituido al cerrar el documento (si de antemano se llam\u00f3 \nalias_nb_pages\n). \nNotar el uso del m\u00e9todo \nset_y\n que permite establecer la posici\u00f3n en una ubicaci\u00f3n absoluta en la p\u00e1gina, empezando desde arriba hacia abajo. \n\n\nOtra caracter\u00edstica interesante es usada aqu\u00ed: el salto de p\u00e1gina autom\u00e1tico. Tan pronto una celda cruza el l\u00edmite de una p\u00e1gina (por defecto a 2 centimetros desde abajo), un salto es realizado y la fuente es restaurada. Aunque el encabezado y pie de p\u00e1gina tienen su propia fuente (Arial), el cuerpo continua en Times. Este mecanismo de restauraci\u00f3n autom\u00e1tica tambien se aplica a los colores y el ancho de la l\u00ednea. El l\u00edmite que dispara los saltos de p\u00e1gina puede establecerce con \nset_auto_page_break\n.\n\n\nSaltos de l\u00ednea y colores\n\n\nContinuemos con un ejemplo que imprime parrafos justificados. Tambi\u00e9n ilustra el uso de colores.\n\n\nfrom fpdf import FPDF\n\ntitle = '20000 Leagues Under the Seas'\n\nclass PDF(FPDF):\n    def header(self):\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Calcular ancho del texto (title) y establecer posici\u00f3n\n        w = self.get_string_width(title) + 6\n        self.set_x((210 - w) / 2)\n        # Colores del marco, fondo y texto\n        self.set_draw_color(0, 80, 180)\n        self.set_fill_color(230, 230, 0)\n        self.set_text_color(220, 50, 50)\n        # Grosor del marco (1 mm)\n        self.set_line_width(1)\n        # Titulo\n        self.cell(w, 9, title, 1, 1, 'C', 1)\n        # Salto de l\u00ednea\n        self.ln(10)\n\n    def footer(self):\n        # Posici\u00f3n a 1.5 cm desde abajo\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Color de texto en gris\n        self.set_text_color(128)\n        # Numero de pagina\n        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')\n\n    def chapter_title(self, num, label):\n        # Arial 12\n        self.set_font('Arial', '', 12)\n        # Color de fondo\n        self.set_fill_color(200, 220, 255)\n        # Titulo\n        self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1)\n        # Salto de l\u00ednea\n        self.ln(4)\n\n    def chapter_body(self, name):\n        # Leer archivo de texto\n        with open(name, 'rb') as fh:\n            txt = fh.read().decode('latin-1')\n        # Times 12\n        self.set_font('Times', '', 12)\n        # Emitir texto justificado\n        self.multi_cell(0, 5, txt)\n        # Salto de l\u00ednea\n        self.ln()\n        # Menci\u00f3n en italic -cursiva-\n        self.set_font('', 'I')\n        self.cell(0, 5, '(end of excerpt)')\n\n    def print_chapter(self, num, title, name):\n        self.add_page()\n        self.chapter_title(num, title)\n        self.chapter_body(name)\n\npdf = PDF()\npdf.set_title(title)\npdf.set_author('Jules Verne')\npdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt')\npdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt')\npdf.output('tuto3.pdf', 'F')\n\n\n\n\nDemo\n\n\nEl m\u00e9todo \nget_string_width\n permite determinar la longitud de una cadena en la fuente actual, usado aqu\u00ed para calcular la posici\u00f3n y el ancho del marco que rodea al t\u00edtulo. Los colores son establecidos (v\u00eda \nset_draw_color\n, \nset_fill_color\n y \nset_text_color\n) y el grosor de la l\u00ednea es establecido a 1 mm (contra 0.2 por defecto) con \nset_line_width\n. Finalmente, emitimos la celda (el \u00faltimo par\u00e1metro es True para indicar que el fondo debe ser rellenado). \n\n\nEl m\u00e9todo usado para imprimir parrafos es \nmulti_cell\n. Cada vez que una l\u00ednea alcanza el extremo derecho de la celda o un caracter de retorno de linea, un salto de l\u00ednea es emitido y una nueva celda es autom\u00e1ticamente creada bajo la actual. El texto es justificado por defecto. \n\n\nDos propiedades del documento son definidas: el t\u00edtulo (\nset_title\n) y el autor (\nset_author\n). Las propiedades pueden ser vistas de dos formas. La primera es abrir el documento directamente con Acrobat Reader, ir al men\u00fa Archivo y elegir la opci\u00f3n Propiedades del Documento. La segunda, tambi\u00e9n disponible en el plug-in, es hacer click izquierdo y seleccionar Propiedades del documento (Document Properties).\n\n\nNotas de instalaci\u00f3n\n\n\nAnteriormente, para importar el objeto se deb\u00eda usar el paquete pyfpdf:\n\n\nfrom pyfpdf import FPDF\n\n\n\n\nA partir de la versi\u00f3n 1.7, para importar el objeto se debe usar el paquete fpdf:\n\n\nfrom fpdf import FPDF", 
            "title": "Tutorial (Spanish translation)"
        }, 
        {
            "location": "/Tutorial-es/index.html#ejemplo-minimo", 
            "text": "Empecemos con el ejemplo cl\u00e1sico:   from fpdf import FPDF\n\npdf = FPDF()\npdf.add_page()\npdf.set_font('Arial', 'B', 16)\npdf.cell(40, 10, 'Hola Mundo!')\npdf.output('tuto1.pdf', 'F')  Demo  Luego de incluir la biblioteca, creamos un objeto FPDF. El constructor  FPDF  es usado aqui con los valores predeterminados: p\u00e1ginas en A4 portrait -vertical- y la unidad de medida en milimetros. Podr\u00eda haberlos especificado explicitamente:   pdf=FPDF('P', 'mm', 'A4')  Es posible usar landscape -apaisado- (L), otros formatos de p\u00e1gina (como Letter -carta- y Legal -oficio-) y \u00fanidad de medida (pt, cm, in).   Por el momento no hay una p\u00e1gina, entonces tenemos que agregar una con  add_page . El origen es la esquina superior-izquierda y la posici\u00f3n actual est\u00e1 ubicada a 1 cm de los bordes; los margenes pueden ser cambiados con  set_margins .   Antes de que pod\u00e1mos imprimir texto, es obligatorio seleccionar una fuente con  set_font , de lo contrario el documento ser\u00e1 inv\u00e1lido. Elegimos Arial bold 16:   pdf.set_font('Arial', 'B', 16)  Podr\u00edamos haber especificado italic -cursiva- con I, underline -subrayado- con U o fuente regular con string vacio (o cualquier combinaci\u00f3n). Noar que el tama\u00f1o de la fuente es dado en puntos, no milimetros (u otra unidad de medida del usuario); esta es la \u00fanica excepci\u00f3n. Las otras fuentes est\u00e1ndar son Times, Courier, Symbol y ZapfDingbats.   Podemos ahora imprimir una celda con  cell . Una celda es un \u00e1rea rectangular, posiblemente enmarcada, que contiene alg\u00fan texto. Se imprime en la posici\u00f3n actual. Especificamos sus dimensiones, su texto (centrado o alineado), si los bordes deber\u00edan ser dibujados, y donde la posici\u00f3n actual se mueve despu\u00e9s (a la derecha, abajo o al principio de la pr\u00f3xima linea). Para agregar un marco, haremos:   pdf.cell(40, 10, 'Hola mundo !', 1)  Para agregar una nueva celda pr\u00f3xima a ella con texto centrada y luego ir a la siguiente l\u00ednea, har\u00edamos:   pdf.cell(60, 10, 'Hecho con FPDF.', 0, 1, 'C')  Nota : el salto de l\u00ednea puede hacerse tambi\u00e9n con  ln . Este m\u00e9todo permite especificar adicionalmente la altura del salto.   Finalmente, el documento es cerrado y enviado al explorador con  output . Podemos haberlo grabado a un fichero al pasarle el nombre de archivo.   Precauci\u00f3n : en caso cuando el PDF es enviado al explorador, nada m\u00e1s debe ser envi\u00e1do a la salida, ni antes ni despu\u00e9s (el m\u00ednimo caracter importa).", 
            "title": "Ejemplo M\u00ednimo"
        }, 
        {
            "location": "/Tutorial-es/index.html#encabezado-pie-de-pagina-salto-de-pagina-e-imagen", 
            "text": "Aqu\u00ed hay un ejemplo de dos p\u00e1ginas con encabezado, pie y logo:   from fpdf import FPDF\n\nclass PDF(FPDF):\n    def header(self):\n        # Logo\n        self.image('logo_pb.png', 10, 8, 33)\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Move to the right\n        self.cell(80)\n        # Title\n        self.cell(30, 10, 'Title', 1, 0, 'C')\n        # Line break\n        self.ln(20)\n\n    # Page footer\n    def footer(self):\n        # Position at 1.5 cm from bottom\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Page number\n        self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C')\n\n# Instantiation of inherited class\npdf = PDF()\npdf.alias_nb_pages()\npdf.add_page()\npdf.set_font('Times', '', 12)\nfor i in range(1, 41):\n    pdf.cell(0, 10, 'Printing line number ' + str(i), 0, 1)\npdf.output('tuto2.pdf', 'F')  Demo  Este ejemplo hace uso de m\u00e9todos   header  y   footer  para procesar el encabezado y pie. Son llamados autom\u00e1ticamente. Ya existen en la clase FPDF pero no hacen nada, por lo tanto tenemos que extender la clase y sobreescribirlos.   El log es impreso con el m\u00e9todo  image  especificando su esquina superior izquierda y su ancho. La altura es calculada autom\u00e1ticamente para respetar las proporciones de la im\u00e1gen.   Para imprimir el n\u00famero de p\u00e1gina, un valor nulo es pasado como ancho de celda. Significa que la celda deber\u00e1 ser extendida hasta el margen derecho de la p\u00e1gina; es \u00fatil centrar texto. El n\u00famero de p\u00e1gina actual es devuelto por  el m\u00e9todo  page_no ; y para el n\u00famero total de p\u00e1ginas, ser\u00e1 obtenido mediante el valor especial {nb} que ser\u00e1 sustituido al cerrar el documento (si de antemano se llam\u00f3  alias_nb_pages ). \nNotar el uso del m\u00e9todo  set_y  que permite establecer la posici\u00f3n en una ubicaci\u00f3n absoluta en la p\u00e1gina, empezando desde arriba hacia abajo.   Otra caracter\u00edstica interesante es usada aqu\u00ed: el salto de p\u00e1gina autom\u00e1tico. Tan pronto una celda cruza el l\u00edmite de una p\u00e1gina (por defecto a 2 centimetros desde abajo), un salto es realizado y la fuente es restaurada. Aunque el encabezado y pie de p\u00e1gina tienen su propia fuente (Arial), el cuerpo continua en Times. Este mecanismo de restauraci\u00f3n autom\u00e1tica tambien se aplica a los colores y el ancho de la l\u00ednea. El l\u00edmite que dispara los saltos de p\u00e1gina puede establecerce con  set_auto_page_break .", 
            "title": "Encabezado, pie de p\u00e1gina, salto de p\u00e1gina e im\u00e1gen"
        }, 
        {
            "location": "/Tutorial-es/index.html#saltos-de-linea-y-colores", 
            "text": "Continuemos con un ejemplo que imprime parrafos justificados. Tambi\u00e9n ilustra el uso de colores.  from fpdf import FPDF\n\ntitle = '20000 Leagues Under the Seas'\n\nclass PDF(FPDF):\n    def header(self):\n        # Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Calcular ancho del texto (title) y establecer posici\u00f3n\n        w = self.get_string_width(title) + 6\n        self.set_x((210 - w) / 2)\n        # Colores del marco, fondo y texto\n        self.set_draw_color(0, 80, 180)\n        self.set_fill_color(230, 230, 0)\n        self.set_text_color(220, 50, 50)\n        # Grosor del marco (1 mm)\n        self.set_line_width(1)\n        # Titulo\n        self.cell(w, 9, title, 1, 1, 'C', 1)\n        # Salto de l\u00ednea\n        self.ln(10)\n\n    def footer(self):\n        # Posici\u00f3n a 1.5 cm desde abajo\n        self.set_y(-15)\n        # Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Color de texto en gris\n        self.set_text_color(128)\n        # Numero de pagina\n        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')\n\n    def chapter_title(self, num, label):\n        # Arial 12\n        self.set_font('Arial', '', 12)\n        # Color de fondo\n        self.set_fill_color(200, 220, 255)\n        # Titulo\n        self.cell(0, 6, 'Chapter %d : %s' % (num, label), 0, 1, 'L', 1)\n        # Salto de l\u00ednea\n        self.ln(4)\n\n    def chapter_body(self, name):\n        # Leer archivo de texto\n        with open(name, 'rb') as fh:\n            txt = fh.read().decode('latin-1')\n        # Times 12\n        self.set_font('Times', '', 12)\n        # Emitir texto justificado\n        self.multi_cell(0, 5, txt)\n        # Salto de l\u00ednea\n        self.ln()\n        # Menci\u00f3n en italic -cursiva-\n        self.set_font('', 'I')\n        self.cell(0, 5, '(end of excerpt)')\n\n    def print_chapter(self, num, title, name):\n        self.add_page()\n        self.chapter_title(num, title)\n        self.chapter_body(name)\n\npdf = PDF()\npdf.set_title(title)\npdf.set_author('Jules Verne')\npdf.print_chapter(1, 'A RUNAWAY REEF', '20k_c1.txt')\npdf.print_chapter(2, 'THE PROS AND CONS', '20k_c2.txt')\npdf.output('tuto3.pdf', 'F')  Demo  El m\u00e9todo  get_string_width  permite determinar la longitud de una cadena en la fuente actual, usado aqu\u00ed para calcular la posici\u00f3n y el ancho del marco que rodea al t\u00edtulo. Los colores son establecidos (v\u00eda  set_draw_color ,  set_fill_color  y  set_text_color ) y el grosor de la l\u00ednea es establecido a 1 mm (contra 0.2 por defecto) con  set_line_width . Finalmente, emitimos la celda (el \u00faltimo par\u00e1metro es True para indicar que el fondo debe ser rellenado).   El m\u00e9todo usado para imprimir parrafos es  multi_cell . Cada vez que una l\u00ednea alcanza el extremo derecho de la celda o un caracter de retorno de linea, un salto de l\u00ednea es emitido y una nueva celda es autom\u00e1ticamente creada bajo la actual. El texto es justificado por defecto.   Dos propiedades del documento son definidas: el t\u00edtulo ( set_title ) y el autor ( set_author ). Las propiedades pueden ser vistas de dos formas. La primera es abrir el documento directamente con Acrobat Reader, ir al men\u00fa Archivo y elegir la opci\u00f3n Propiedades del Documento. La segunda, tambi\u00e9n disponible en el plug-in, es hacer click izquierdo y seleccionar Propiedades del documento (Document Properties).", 
            "title": "Saltos de l\u00ednea y colores"
        }, 
        {
            "location": "/Tutorial-es/index.html#notas-de-instalacion", 
            "text": "Anteriormente, para importar el objeto se deb\u00eda usar el paquete pyfpdf:  from pyfpdf import FPDF  A partir de la versi\u00f3n 1.7, para importar el objeto se debe usar el paquete fpdf:  from fpdf import FPDF", 
            "title": "Notas de instalaci\u00f3n"
        }, 
        {
            "location": "/FAQ/index.html", 
            "text": "FAQ\n\n\nSee \nProject Home\n for an overall \nintroduction.\n\n\n\n\n\n\nFAQ\n\n\nWhat is FPDF?\n\n\nWhat is this library not?\n\n\nHow does this library compare to ...?\n\n\nWhat does the code look like?\n\n\nDoes this library have any framework integration?\n\n\nWhat is the development status of this library?\n\n\nWhat is the license of this library (pyfpdf)?\n\n\n\n\n\n\n\n\n\n\nWhat is FPDF?\n\n\nFPDF\n (and PyFPDF) is a library with low-level\nprimitives to easily generate PDF documents. This is similar to ReportLab's\ngraphics canvas, but with some methods to output \"fluid\" cells (\"flowables\"\nthat can span multiple rows, pages, tables, columns, etc).\n\n\nIt has two methods (\"hooks\") that can be implemented in a subclass, headers\nand footers.\n\n\nOriginally developed in PHP several years ago (as a free alternative to\nproprietary C libraries), it has been ported to many programming languages,\nincluding ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python.\n\n\nFor more information see: \nhttp://www.fpdf.org/en/links.php\n\n\nWhat is this library \nnot\n?\n\n\nThis library is not a:\n\n\n\n\n\n\ncharts or widgets library (but you can import PNG or JPG images, use PIL or\nany other library, or draw the figures yourself; see examples)\n\n\n\n\n\n\n\"flexible page layout engine\" like\n\nReportlab\n PLATYPUS (but it can do\ncolumns, chapters, etc.; see the \nTutorial\n)\n\n\n\n\n\n\nXML or object definition language like\n\nGeraldo Reports\n, Jasper Reports, or similar\n(but look at \nwrite_html\n for simple HTML reports and\n\nTemplates\n for fill-in-the-blank documents)\n\n\n\n\n\n\nPDF text extractor, converter, splitter or similar. Look at\n\npyPdf\n.\n\n\n\n\n\n\nHow does this library compare to ...?\n\n\nThe API is geared toward giving the user access to features of the Portable\nDocument Format as they are described in the Adobe PDF Reference Manual, this\nbypasses needless complexities for simpler use cases.\n\n\nIt is small: Source folder \n 200Kb.\n\n\nIt includes cell and multi_cell primitives to draw fluid document like \ninvoices, listings and reports, and includes basic support for HTML rendering.\n\n\n\n\nCompared to other solutions, this library should be easier to use and adapt\nfor most common documents (no need to use a page layout engine, style\nsheets, templates, or stories...), with full control over the generated PDF\ndocument (including advanced features and extensions).\n\n\n\n\nWhat does the code look like?\n\n\nFollowing is an example similar to the Reportlab one in the book of web2py. Note\nthe simplified import and usage:\n(\nhttp://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF\n)\n\n\nPyFPDF:\n\n\nfrom fpdf import FPDF\n\ndef get_me_a_pyfpdf():\n    title = \nThis The Doc Title\n\n    heading = \nFirst Paragraph\n\n    text = 'bla ' * 10000\n\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.set_font('Times', 'B', 15)\n    pdf.cell(w=210, h=9, txt=title, border=0, ln=1, align='C', fill=0)\n    pdf.set_font('Times', 'B', 15)\n    pdf.cell(w=0, h=6, txt=heading, border=0, ln=1, align='L', fill=0)\n    pdf.set_font('Times', '', 12)\n    pdf.multi_cell(w=0, h=5, txt=text)\n    response.headers['Content-Type'] = 'application/pdf'\n    return pdf.output(dest='S')\n\n\n\n\nReportlab:\n\n\nfrom reportlab.platypus import *\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.rl_config import defaultPageSize\nfrom reportlab.lib.units import inch, mm\nfrom reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY\nfrom reportlab.lib import colors\nfrom uuid import uuid4\nfrom cgi import escape\nimport os\n\ndef get_me_a_pdf():\n    title = \nThis The Doc Title\n\n    heading = \nFirst Paragraph\n\n    text = 'bla ' * 10000\n\n    styles = getSampleStyleSheet()\n    tmpfilename = os.path.join(request.folder, 'private', str(uuid4()))\n    doc = SimpleDocTemplate(tmpfilename)\n    story = []\n    story.append(Paragraph(escape(title), styles[\nTitle\n]))\n    story.append(Paragraph(escape(heading), styles[\nHeading2\n]))\n    story.append(Paragraph(escape(text), styles[\nNormal\n]))\n    story.append(Spacer(1, 2 * inch))\n    doc.build(story)\n    data = open(tmpfilename, \nrb\n).read()\n    os.unlink(tmpfilename)\n    response.headers['Content-Type'] = 'application/pdf'\n    return data\n\n\n\n\nDoes this library have any framework integration?\n\n\nYes, if you use web2py, you can make simple HTML reports that can be viewed in a\nbrowser, or downloaded as PDF.\n\n\nAlso, using web2py DAL, you can easily set up a templating engine for PDF \ndocuments.\n\n\nLook at [Web2Py] (Web2Py.md) for examples. \n# TODO fix link\n\n\nWhat is the development status of this library?\n\n\nThis library was improved over the years since the initial port from PHP. Some \ncode is in early development stages (mainly UTF-8 support and some advanced \nfeatures). The good news is that PHP versions and examples are available from\na long time ago, so migration and some bug-fixes are easy.\n\n\nSaid that, a former version is working successfully and is commercially \nsupported since late 2008 for electronic invoice templates compliant with AFIP\n(Argentina IRS) normative, in several environments (Linux, Windows, etc.). It \nwas originally included in \n\nPyRece\n, with thousands \ndownloads to date.\n\n\nFor further information see:\n\n\n\n\nhttp://www.pyafipws.com.ar/\n\n\nhttp://code.google.com/p/pyafipws/\n\n\nhttp://groups.google.com/group/pyafipws\n\n\n\n\nIn contrast, \nwrite_html\n support is not complete, so it must be considered in \nalpha state. Further enhancements using web2py helpers and an XML parser will \nenable parsing more complex HTML files.\n\n\nWhat is the license of this library (pyfpdf)?\n\n\nLGPL v3.0.\n\n\nOriginal FPDF uses a permissive license:\n\nhttp://www.fpdf.org/en/FAQ.php#q1\n\n\n\n\n\"FPDF is released under a permissive license: there is no usage\nrestriction. You may embed it freely in your application (commercial\nor not), with or without modifications.\"\n\n\n\n\nFPDF version 1.6's license.txt says:\n\nhttp://www.fpdf.org/es/dl.php?v=16\nf=zip\n\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software to use, copy, modify, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is furnished\nto do so.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.\n\n\n\n\nThe fpdf.py library is a revision of a port by Max Pat. The original source uses the same\nlicence: \nhttp://www.fpdf.org/dl.php?id=94\n\n\n# * Software: FPDF\n# * Version:  1.53\n# * Date:     2004-12-31\n# * Author:   Olivier PLATHEY\n# * License:  Freeware\n# *\n# * You may use and modify this software as you wish.\n# * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05\n\n\n\n\nTo avoid ambiguity (and to be compatible with other free software, open source \nlicenses), LGPL was chosen for the Google Code project (as freeware isn't \nlisted).\n\n\nSome FPDF ports had chosen similar licences (wxWindows Licence for C++ port, \nMIT licence for Java port, etc.): \nhttp://www.fpdf.org/en/links.php\n\n\nOther FPDF derivatives also choose LGPL, such as \n\nsFPDF\n by \n\nIan Back\n.", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/index.html#faq", 
            "text": "See  Project Home  for an overall \nintroduction.    FAQ  What is FPDF?  What is this library not?  How does this library compare to ...?  What does the code look like?  Does this library have any framework integration?  What is the development status of this library?  What is the license of this library (pyfpdf)?", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/index.html#what-is-fpdf", 
            "text": "FPDF  (and PyFPDF) is a library with low-level\nprimitives to easily generate PDF documents. This is similar to ReportLab's\ngraphics canvas, but with some methods to output \"fluid\" cells (\"flowables\"\nthat can span multiple rows, pages, tables, columns, etc).  It has two methods (\"hooks\") that can be implemented in a subclass, headers\nand footers.  Originally developed in PHP several years ago (as a free alternative to\nproprietary C libraries), it has been ported to many programming languages,\nincluding ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python.  For more information see:  http://www.fpdf.org/en/links.php", 
            "title": "What is FPDF?"
        }, 
        {
            "location": "/FAQ/index.html#what-is-this-library-not", 
            "text": "This library is not a:    charts or widgets library (but you can import PNG or JPG images, use PIL or\nany other library, or draw the figures yourself; see examples)    \"flexible page layout engine\" like Reportlab  PLATYPUS (but it can do\ncolumns, chapters, etc.; see the  Tutorial )    XML or object definition language like Geraldo Reports , Jasper Reports, or similar\n(but look at  write_html  for simple HTML reports and Templates  for fill-in-the-blank documents)    PDF text extractor, converter, splitter or similar. Look at pyPdf .", 
            "title": "What is this library not?"
        }, 
        {
            "location": "/FAQ/index.html#how-does-this-library-compare-to", 
            "text": "The API is geared toward giving the user access to features of the Portable\nDocument Format as they are described in the Adobe PDF Reference Manual, this\nbypasses needless complexities for simpler use cases.  It is small: Source folder   200Kb.  It includes cell and multi_cell primitives to draw fluid document like \ninvoices, listings and reports, and includes basic support for HTML rendering.   Compared to other solutions, this library should be easier to use and adapt\nfor most common documents (no need to use a page layout engine, style\nsheets, templates, or stories...), with full control over the generated PDF\ndocument (including advanced features and extensions).", 
            "title": "How does this library compare to ...?"
        }, 
        {
            "location": "/FAQ/index.html#what-does-the-code-look-like", 
            "text": "Following is an example similar to the Reportlab one in the book of web2py. Note\nthe simplified import and usage:\n( http://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF )  PyFPDF:  from fpdf import FPDF\n\ndef get_me_a_pyfpdf():\n    title =  This The Doc Title \n    heading =  First Paragraph \n    text = 'bla ' * 10000\n\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.set_font('Times', 'B', 15)\n    pdf.cell(w=210, h=9, txt=title, border=0, ln=1, align='C', fill=0)\n    pdf.set_font('Times', 'B', 15)\n    pdf.cell(w=0, h=6, txt=heading, border=0, ln=1, align='L', fill=0)\n    pdf.set_font('Times', '', 12)\n    pdf.multi_cell(w=0, h=5, txt=text)\n    response.headers['Content-Type'] = 'application/pdf'\n    return pdf.output(dest='S')  Reportlab:  from reportlab.platypus import *\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.rl_config import defaultPageSize\nfrom reportlab.lib.units import inch, mm\nfrom reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY\nfrom reportlab.lib import colors\nfrom uuid import uuid4\nfrom cgi import escape\nimport os\n\ndef get_me_a_pdf():\n    title =  This The Doc Title \n    heading =  First Paragraph \n    text = 'bla ' * 10000\n\n    styles = getSampleStyleSheet()\n    tmpfilename = os.path.join(request.folder, 'private', str(uuid4()))\n    doc = SimpleDocTemplate(tmpfilename)\n    story = []\n    story.append(Paragraph(escape(title), styles[ Title ]))\n    story.append(Paragraph(escape(heading), styles[ Heading2 ]))\n    story.append(Paragraph(escape(text), styles[ Normal ]))\n    story.append(Spacer(1, 2 * inch))\n    doc.build(story)\n    data = open(tmpfilename,  rb ).read()\n    os.unlink(tmpfilename)\n    response.headers['Content-Type'] = 'application/pdf'\n    return data", 
            "title": "What does the code look like?"
        }, 
        {
            "location": "/FAQ/index.html#does-this-library-have-any-framework-integration", 
            "text": "Yes, if you use web2py, you can make simple HTML reports that can be viewed in a\nbrowser, or downloaded as PDF.  Also, using web2py DAL, you can easily set up a templating engine for PDF \ndocuments.  Look at [Web2Py] (Web2Py.md) for examples.  # TODO fix link", 
            "title": "Does this library have any framework integration?"
        }, 
        {
            "location": "/FAQ/index.html#what-is-the-development-status-of-this-library", 
            "text": "This library was improved over the years since the initial port from PHP. Some \ncode is in early development stages (mainly UTF-8 support and some advanced \nfeatures). The good news is that PHP versions and examples are available from\na long time ago, so migration and some bug-fixes are easy.  Said that, a former version is working successfully and is commercially \nsupported since late 2008 for electronic invoice templates compliant with AFIP\n(Argentina IRS) normative, in several environments (Linux, Windows, etc.). It \nwas originally included in  PyRece , with thousands \ndownloads to date.  For further information see:   http://www.pyafipws.com.ar/  http://code.google.com/p/pyafipws/  http://groups.google.com/group/pyafipws   In contrast,  write_html  support is not complete, so it must be considered in \nalpha state. Further enhancements using web2py helpers and an XML parser will \nenable parsing more complex HTML files.", 
            "title": "What is the development status of this library?"
        }, 
        {
            "location": "/FAQ/index.html#what-is-the-license-of-this-library-pyfpdf", 
            "text": "LGPL v3.0.  Original FPDF uses a permissive license: http://www.fpdf.org/en/FAQ.php#q1   \"FPDF is released under a permissive license: there is no usage\nrestriction. You may embed it freely in your application (commercial\nor not), with or without modifications.\"   FPDF version 1.6's license.txt says: http://www.fpdf.org/es/dl.php?v=16 f=zip   Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software to use, copy, modify, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is furnished\nto do so.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.   The fpdf.py library is a revision of a port by Max Pat. The original source uses the same\nlicence:  http://www.fpdf.org/dl.php?id=94  # * Software: FPDF\n# * Version:  1.53\n# * Date:     2004-12-31\n# * Author:   Olivier PLATHEY\n# * License:  Freeware\n# *\n# * You may use and modify this software as you wish.\n# * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05  To avoid ambiguity (and to be compatible with other free software, open source \nlicenses), LGPL was chosen for the Google Code project (as freeware isn't \nlisted).  Some FPDF ports had chosen similar licences (wxWindows Licence for C++ port, \nMIT licence for Java port, etc.):  http://www.fpdf.org/en/links.php  Other FPDF derivatives also choose LGPL, such as  sFPDF  by  Ian Back .", 
            "title": "What is the license of this library (pyfpdf)?"
        }, 
        {
            "location": "/Development/index.html", 
            "text": "Development\n\n\n\n\n\n\nDevelopment\n\n\nIntroduction\n\n\nRepository structure\n\n\nTesting\n\n\nDocumentation\n\n\nSee also\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\nThis page has summary information about developing the PyPDF library.\n\n\nThis project, fpdf2 is a [FORK] of the PyFPDF project, which can be found\n\nhere\n. It is made in order to keep the\nlibrary updated and fulfill the goals of its\n\nRoadmap\n and a general overhaul of\nthe codebase because there was technical debt keeping features from being\ncreated and bugs from being eradicated.\n\n\nMore on pyfpdf:\n\n\n\n\nThis project started as Python fork of the \nFPDF\n PHP library. \nLater, code for native reading TTF fonts was added. FPDF has not been updated since\n2011. See also the \nTCPDF\n library.\n\n\nUntil 2015 the code was developed at \nGoogle Code\n.\nNow the main repository is at \nGithub\n.\n\n\nYou can also view the\n\nold repository\n,\n\nold issues\n, and \n\nold wiki\n.\n\n\nAfter being committed to the master branch, code documentation is automatically uploaded to \nthe \nRead the Docs\n site.\n\n\n\n\nRepository structure\n\n\n\n\n[attic]\n - folder with old code and useful, but unsupported things\n\n\n[docs]\n - viewable documenation folder\n\n\n[mkdocs_docs]\n - viewable documenation source folder\n\n\n[fpdf]\n - library source\n\n\n[scripts]\n - manipulate this repository\n\n\n[test]\n - tests\n\n\n[tutorial]\n - tutorials (see also \nTutorial\n)\n\n\nREADME.md\n, \nPyPIReadme.rst\n - Github and PyPI Readme's.\n\n\nLICENSE\n - license information\n\n\nsetup.cfg\n, \nsetup.py\n, \nMANIFEST.in\n - setup configuration\n\n\nmkdocs.yml\n - config for \nMkDocs\n\n\ntox.ini\n - config for \nTox\n\n\n\n\nTesting\n\n\nTesting is done with \nTox\n, and is\nself-documented in the \ntox.ini\n file in the repository. To run tests, cd into\nthe cloned repository and run \ntox\n.\n\n\nIf you do not want to run tests for all versions of python, run \ntox -e py27\n\n(or your version of python). To install all versions of python that are\nsupported on Ubuntu, see the instructions on the Github Repository home page\nof this project.\n\n\nBe sure to see the example tests in the \ntest\n folder \n \ntest\\utilities.py\n\nand explore that folder in general.\n\n\nDocumentation\n\n\nTo build docs, cd into repository and \ntox -e docs\n.\n\n\nThis Standalone documentation is in the \nmkdocs_docs\n subfolder in \n\nMarkdown\n format. Building\ninstructions are contained in the configuration file \nmkdocs.yml\n and also in\nthe docs script in the \ntox.ini\n file.\n\n\nAdditional documentation is generated from inline comments, and is available\nin the project \nhome page\n.\n\n\nSee also\n\n\nProject Home\n, \nFrequently asked questions\n, \n\nUnicode\n.", 
            "title": "Development"
        }, 
        {
            "location": "/Development/index.html#development", 
            "text": "Development  Introduction  Repository structure  Testing  Documentation  See also", 
            "title": "Development"
        }, 
        {
            "location": "/Development/index.html#introduction", 
            "text": "This page has summary information about developing the PyPDF library.  This project, fpdf2 is a [FORK] of the PyFPDF project, which can be found here . It is made in order to keep the\nlibrary updated and fulfill the goals of its Roadmap  and a general overhaul of\nthe codebase because there was technical debt keeping features from being\ncreated and bugs from being eradicated.  More on pyfpdf:   This project started as Python fork of the  FPDF  PHP library. \nLater, code for native reading TTF fonts was added. FPDF has not been updated since\n2011. See also the  TCPDF  library.  Until 2015 the code was developed at  Google Code .\nNow the main repository is at  Github .  You can also view the old repository , old issues , and  old wiki .  After being committed to the master branch, code documentation is automatically uploaded to \nthe  Read the Docs  site.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Development/index.html#repository-structure", 
            "text": "[attic]  - folder with old code and useful, but unsupported things  [docs]  - viewable documenation folder  [mkdocs_docs]  - viewable documenation source folder  [fpdf]  - library source  [scripts]  - manipulate this repository  [test]  - tests  [tutorial]  - tutorials (see also  Tutorial )  README.md ,  PyPIReadme.rst  - Github and PyPI Readme's.  LICENSE  - license information  setup.cfg ,  setup.py ,  MANIFEST.in  - setup configuration  mkdocs.yml  - config for  MkDocs  tox.ini  - config for  Tox", 
            "title": "Repository structure"
        }, 
        {
            "location": "/Development/index.html#testing", 
            "text": "Testing is done with  Tox , and is\nself-documented in the  tox.ini  file in the repository. To run tests, cd into\nthe cloned repository and run  tox .  If you do not want to run tests for all versions of python, run  tox -e py27 \n(or your version of python). To install all versions of python that are\nsupported on Ubuntu, see the instructions on the Github Repository home page\nof this project.  Be sure to see the example tests in the  test  folder    test\\utilities.py \nand explore that folder in general.", 
            "title": "Testing"
        }, 
        {
            "location": "/Development/index.html#documentation", 
            "text": "To build docs, cd into repository and  tox -e docs .  This Standalone documentation is in the  mkdocs_docs  subfolder in  Markdown  format. Building\ninstructions are contained in the configuration file  mkdocs.yml  and also in\nthe docs script in the  tox.ini  file.  Additional documentation is generated from inline comments, and is available\nin the project  home page .", 
            "title": "Documentation"
        }, 
        {
            "location": "/Development/index.html#see-also", 
            "text": "Project Home ,  Frequently asked questions ,  Unicode .", 
            "title": "See also"
        }, 
        {
            "location": "/Templates/index.html", 
            "text": "Introduction\n\n\nTemplates are predefined documents (like invoices, tax forms, etc.), where each element (text, lines, barcodes, etc.) has a fixed position (x1, y1, x2, y2), style (font, size, etc.) and a default text.\n\n\nThis elements can act as placeholders, so the program can change the default text \"filling\" the document.\n\n\nAlso, the elements can be defined in a CSV file or in a database, so the user can easily adapt the form to his printing needs.\n\n\nA template is used like a dict, setting its items' values.\n\n\nDetails - Template definition\n\n\nA template is composed of a header and a list of elements.\n\n\nThe header contains the page format, title of the document and other metadata.\n\n\nElements have the following properties (columns in a CSV, fields in a database):\n\n\n\n\nname: placeholder identification\n\n\ntype: 'T': texts, 'L': lines, 'I': images, 'B': boxes, 'BC': barcodes\n\n\nx1, y1, x2, y2: top-left, bottom-right coordinates (in mm)\n\n\nfont: e.g. \"Arial\"\n\n\nsize: text size in points, e.g. 10\n\n\nbold, italic, underline: text style (non-empty to enable)\n\n\nforeground, background: text and fill colors, e.g. 0xFFFFFF\n\n\nalign: text alignment, 'L': left, 'R': right, 'C': center\n\n\ntext: default string, can be replaced at runtime\n\n\npriority: Z-order\n\n\nmultiline: None for single line (default), True to for multicells (multiple lines), False trims to exactly fit the space defined\n\n\n\n\nHow to create a template\n\n\nA template can be created in 3 ways:\n\n\n\n\nBy defining everything manually in a hardcoded way\n\n\nBy using a template definition in a CSV document and parsing the CSV with Template.parse_dict()\n\n\nBy defining the template in a database (this applies to [Web2Py] (Web2Py.md) integration)\n\n\n\n\nNote the following, the definition of a template will contain the elements. The header will be given during instantiation (except for the database method).\n\n\nExample - Hardcoded\n\n\n\nfrom fpdf import Template\n\n#this will define the ELEMENTS that will compose the template. \nelements = [\n    { 'name': 'company_logo', 'type': 'I', 'x1': 20.0, 'y1': 17.0, 'x2': 78.0, 'y2': 30.0, 'font': None, 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': 'logo', 'priority': 2, },\n    { 'name': 'company_name', 'type': 'T', 'x1': 17.0, 'y1': 32.5, 'x2': 115.0, 'y2': 37.5, 'font': 'Arial', 'size': 12.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '', 'priority': 2, },\n    { 'name': 'box', 'type': 'B', 'x1': 15.0, 'y1': 15.0, 'x2': 185.0, 'y2': 260.0, 'font': 'Arial', 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 0, },\n    { 'name': 'box_x', 'type': 'B', 'x1': 95.0, 'y1': 15.0, 'x2': 105.0, 'y2': 25.0, 'font': 'Arial', 'size': 0.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 2, },\n    { 'name': 'line1', 'type': 'L', 'x1': 100.0, 'y1': 25.0, 'x2': 100.0, 'y2': 57.0, 'font': 'Arial', 'size': 0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 3, },\n    { 'name': 'barcode', 'type': 'BC', 'x1': 20.0, 'y1': 246.5, 'x2': 140.0, 'y2': 254.0, 'font': 'Interleaved 2of5 NT', 'size': 0.75, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '200000000001000159053338016581200810081', 'priority': 3, },\n]\n\n#here we instantiate the template and define the HEADER\nf = Template(format=\nA4\n, elements=elements,\n             title=\nSample Invoice\n)\nf.add_page()\n\n#we FILL some of the fields of the template with the information we want\n#note we access the elements treating the template instance as a \ndict\n\nf[\ncompany_name\n] = \nSample Company\n\nf[\ncompany_logo\n] = \npyfpdf/tutorial/logo.png\n\n\n#and now we render the page\nf.render(\n./template.pdf\n)\n\n\n\n\n\nSee template.py or [Web2Py] (Web2Py.md) for a complete example.\n\n\nExample - Elements defined in CSV file\n\n\nYou define your elements in a CSV file \"mycsvfile.csv\"\nthat will look like:\n\n\nline0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0\nline1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0\nname0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2\ntitle0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2\n\n\n\n\nRemember that each line represents an element and each field represents one of the properties of the element in the following order:\n('name','type','x1','y1','x2','y2','font','size','bold','italic','underline','foreground','background','align','text','priority', 'multiline')\n\n\nThen you can use the file like this:\n\n\ndef test_template():\n    f = Template(format=\nA4\n,\n                 title=\nSample Invoice\n)\n    f.parse_csv(\nmycsvfile.csv\n)\n    f.add_page()\n    f[\ncompany_name\n] = \nSample Company\n\n    response.headers['Content-Type'] = 'application/pdf'\n    return f.render(\n./template.pdf\n, dest='S')\n\n\n\n\n\nDesigner - GUI tool to design templates\n\n\nThis library includes a program \ndesigner.py\n to visually modify the designs of a template (e.g., an invoice, report, etc.).\n\n\nInput files are CSV spreadsheets describing the design (see above).\nOnce opened, the designer displays the template with the elements as how they will be located.\n\n\nThe toolbar has buttons for:\n\n\n\n\nOpen, save and print (preview) template\n\n\nAdd, delete and duplicate\n\n\nFind items by name or by text\n\n\nFind and replace (modify selected elements, mainly move x/y)\n\n\n\n\nOver an element, double left click opens a dialog to edit its text and right click opens a dialog with the properties window.\nYou can select multiple items by holding down shift and left clicking them.\nTo move the elements you can use the arrow keys or drag the elements.\n\n\nTo run it, just go to the directory and run:\n\n\npython designer.py\n\n\n\n\n(you need to have wx installed).\n\n\nIf you are having problems making it work, change the imports on designer.py file to the following (it should be fixed in the next version):\n\n\nimport os, sys\nimport wx\nimport wx.lib\nimport wx.lib.ogl as ogl\ntry:\n    from wx.lib.wordwrap import wordwrap\nexcept ImportError:\n    wordwrap = lambda text, width, dc: text\n\ntry:\n    from template import Template\nexcept ImportError:\n    # we are frozen?\n    from fpdf.template import Template\n\n\n\n\nAs an example, the following screenshot shows the Visual Designer, with the sample invoice.csv file open and 'logo' element selected, editing its properties:", 
            "title": "Templates"
        }, 
        {
            "location": "/Templates/index.html#introduction", 
            "text": "Templates are predefined documents (like invoices, tax forms, etc.), where each element (text, lines, barcodes, etc.) has a fixed position (x1, y1, x2, y2), style (font, size, etc.) and a default text.  This elements can act as placeholders, so the program can change the default text \"filling\" the document.  Also, the elements can be defined in a CSV file or in a database, so the user can easily adapt the form to his printing needs.  A template is used like a dict, setting its items' values.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Templates/index.html#details-template-definition", 
            "text": "A template is composed of a header and a list of elements.  The header contains the page format, title of the document and other metadata.  Elements have the following properties (columns in a CSV, fields in a database):   name: placeholder identification  type: 'T': texts, 'L': lines, 'I': images, 'B': boxes, 'BC': barcodes  x1, y1, x2, y2: top-left, bottom-right coordinates (in mm)  font: e.g. \"Arial\"  size: text size in points, e.g. 10  bold, italic, underline: text style (non-empty to enable)  foreground, background: text and fill colors, e.g. 0xFFFFFF  align: text alignment, 'L': left, 'R': right, 'C': center  text: default string, can be replaced at runtime  priority: Z-order  multiline: None for single line (default), True to for multicells (multiple lines), False trims to exactly fit the space defined", 
            "title": "Details - Template definition"
        }, 
        {
            "location": "/Templates/index.html#how-to-create-a-template", 
            "text": "A template can be created in 3 ways:   By defining everything manually in a hardcoded way  By using a template definition in a CSV document and parsing the CSV with Template.parse_dict()  By defining the template in a database (this applies to [Web2Py] (Web2Py.md) integration)   Note the following, the definition of a template will contain the elements. The header will be given during instantiation (except for the database method).", 
            "title": "How to create a template"
        }, 
        {
            "location": "/Templates/index.html#example-hardcoded", 
            "text": "from fpdf import Template\n\n#this will define the ELEMENTS that will compose the template. \nelements = [\n    { 'name': 'company_logo', 'type': 'I', 'x1': 20.0, 'y1': 17.0, 'x2': 78.0, 'y2': 30.0, 'font': None, 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': 'logo', 'priority': 2, },\n    { 'name': 'company_name', 'type': 'T', 'x1': 17.0, 'y1': 32.5, 'x2': 115.0, 'y2': 37.5, 'font': 'Arial', 'size': 12.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '', 'priority': 2, },\n    { 'name': 'box', 'type': 'B', 'x1': 15.0, 'y1': 15.0, 'x2': 185.0, 'y2': 260.0, 'font': 'Arial', 'size': 0.0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 0, },\n    { 'name': 'box_x', 'type': 'B', 'x1': 95.0, 'y1': 15.0, 'x2': 105.0, 'y2': 25.0, 'font': 'Arial', 'size': 0.0, 'bold': 1, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 2, },\n    { 'name': 'line1', 'type': 'L', 'x1': 100.0, 'y1': 25.0, 'x2': 100.0, 'y2': 57.0, 'font': 'Arial', 'size': 0, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': None, 'priority': 3, },\n    { 'name': 'barcode', 'type': 'BC', 'x1': 20.0, 'y1': 246.5, 'x2': 140.0, 'y2': 254.0, 'font': 'Interleaved 2of5 NT', 'size': 0.75, 'bold': 0, 'italic': 0, 'underline': 0, 'foreground': 0, 'background': 0, 'align': 'I', 'text': '200000000001000159053338016581200810081', 'priority': 3, },\n]\n\n#here we instantiate the template and define the HEADER\nf = Template(format= A4 , elements=elements,\n             title= Sample Invoice )\nf.add_page()\n\n#we FILL some of the fields of the template with the information we want\n#note we access the elements treating the template instance as a  dict \nf[ company_name ] =  Sample Company \nf[ company_logo ] =  pyfpdf/tutorial/logo.png \n\n#and now we render the page\nf.render( ./template.pdf )  See template.py or [Web2Py] (Web2Py.md) for a complete example.", 
            "title": "Example - Hardcoded"
        }, 
        {
            "location": "/Templates/index.html#example-elements-defined-in-csv-file", 
            "text": "You define your elements in a CSV file \"mycsvfile.csv\"\nthat will look like:  line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0\nline1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0\nname0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2\ntitle0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2  Remember that each line represents an element and each field represents one of the properties of the element in the following order:\n('name','type','x1','y1','x2','y2','font','size','bold','italic','underline','foreground','background','align','text','priority', 'multiline')  Then you can use the file like this:  def test_template():\n    f = Template(format= A4 ,\n                 title= Sample Invoice )\n    f.parse_csv( mycsvfile.csv )\n    f.add_page()\n    f[ company_name ] =  Sample Company \n    response.headers['Content-Type'] = 'application/pdf'\n    return f.render( ./template.pdf , dest='S')", 
            "title": "Example - Elements defined in CSV file"
        }, 
        {
            "location": "/Templates/index.html#designer-gui-tool-to-design-templates", 
            "text": "This library includes a program  designer.py  to visually modify the designs of a template (e.g., an invoice, report, etc.).  Input files are CSV spreadsheets describing the design (see above).\nOnce opened, the designer displays the template with the elements as how they will be located.  The toolbar has buttons for:   Open, save and print (preview) template  Add, delete and duplicate  Find items by name or by text  Find and replace (modify selected elements, mainly move x/y)   Over an element, double left click opens a dialog to edit its text and right click opens a dialog with the properties window.\nYou can select multiple items by holding down shift and left clicking them.\nTo move the elements you can use the arrow keys or drag the elements.  To run it, just go to the directory and run:  python designer.py  (you need to have wx installed).  If you are having problems making it work, change the imports on designer.py file to the following (it should be fixed in the next version):  import os, sys\nimport wx\nimport wx.lib\nimport wx.lib.ogl as ogl\ntry:\n    from wx.lib.wordwrap import wordwrap\nexcept ImportError:\n    wordwrap = lambda text, width, dc: text\n\ntry:\n    from template import Template\nexcept ImportError:\n    # we are frozen?\n    from fpdf.template import Template  As an example, the following screenshot shows the Visual Designer, with the sample invoice.csv file open and 'logo' element selected, editing its properties:", 
            "title": "Designer - GUI tool to design templates"
        }, 
        {
            "location": "/Unicode/index.html", 
            "text": "Introduction\n\n\n\n\n\n\nIntroduction\n\n\nExample\n\n\nMetric Files\n\n\nFree Font Pack and Copyright Restrictions\n\n\n\n\n\n\n\n\n\n\nThe FPDF class was modified adding UTF-8 support.\nMoreover, it embeds only the necessary parts of the fonts that are used in the \ndocument, making the file size much smaller than if the whole fonts were \nembedded. These features were originally developed for the \n\nmPDF\n project, and ported from \n\nIan Back\n's\n\nsFPDF\n LGPL PHP version.\n\n\nBefore you can use UTF-8, you have to install at least one Unicode font in the \nfont directory (or system font folder). Some free font packages are available \nfor download (extract them into the font folder):\n\n\n\n\n\n\nDejaVu\n family: Sans, Sans Condensed, Serif,\nSerif Condensed, Sans Mono (Supports more than 200 languages)\n\n\n\n\n\n\nGNU FreeFont\n family: FreeSans,\nFreeSerif, FreeMono\n\n\n\n\n\n\nIndic\n\n(ttf-indic-fonts Debian and Ubuntu package) for Bengali, Devanagari, Gujarati,\nGurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya,\nTamil, Telugu, Tibetan\n\n\n\n\n\n\nAR PL New Sung\n (firefly):\nThe Open Source Chinese Font (also supports other east Asian languages)\n\n\n\n\n\n\nAlee\n (ttf-alee Arch Linux\npackage): General purpose Hangul Truetype fonts that contain Korean syllable\nand Latin9 (iso8859-15) characters.\n\n\n\n\n\n\nFonts-TLWG\n (formerly\nThaiFonts-Scalable)\n\n\n\n\n\n\nThese fonts are included with this library's installers; see \n\nFree Font Pack for FPDF\n below for\nmore information.\n\n\nThen, to use a Unicode font in your script, pass \nTrue\n as the fourth parameter \nof \nadd_font\n.\n\n\nExample\n\n\nThis example uses several free fonts to display some Unicode strings. Be sure to\ninstall the fonts in the \nfont\n directory first.\n\n\n#!/usr/bin/env python\n# -*- coding: utf8 -*-\n\nfrom fpdf import FPDF\n\npdf = FPDF()\npdf.add_page()\n\n# Add a DejaVu Unicode font (uses UTF-8)\n# Supports more than 200 languages. For a coverage status see:\n# http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt\npdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)\npdf.set_font('DejaVu', '', 14)\n\ntext = u\n\nEnglish: Hello World\nGreek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c2\nPolish: Witaj \u015bwiecie\nPortuguese: Ol\u00e1 mundo\nRussian: \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u041c\u0438\u0440\nVietnamese: Xin ch\u00e0o th\u1ebf gi\u1edbi\nArabic: \u0645\u0631\u062d\u0628\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\nHebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd\n\n\n\nfor txt in text.split('\\n'):\n    pdf.write(8, txt)\n    pdf.ln(8)\n\n# Add a Indic Unicode font (uses UTF-8)\n# Supports: Bengali, Devanagari, Gujarati, \n#           Gurmukhi (including the variants for Punjabi) \n#           Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan\npdf.add_font('gargi', '', 'gargi.ttf', uni=True) \npdf.set_font('gargi', '', 14)\npdf.write(8, u'Hindi: \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e')\npdf.ln(20)\n\n# Add a AR PL New Sung Unicode font (uses UTF-8)\n# The Open Source Chinese Font (also supports other east Asian languages)\npdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True)\npdf.set_font('fireflysung', '', 14)\npdf.write(8, u'Chinese: \u4f60\u597d\u4e16\u754c\\n')\npdf.write(8, u'Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c\\n')\npdf.ln(10)\n\n# Add a Alee Unicode font (uses UTF-8)\n# General purpose Hangul truetype fonts that contain Korean syllable \n# and Latin9 (iso8859-15) characters.\npdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True)\npdf.set_font('eunjin', '', 14)\npdf.write(8, u'Korean: \uc548\ub155\ud558\uc138\uc694')\npdf.ln(20)\n\n# Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8)\npdf.add_font('waree', '', 'Waree.ttf', uni=True)\npdf.set_font('waree', '', 14)\npdf.write(8, u'Thai: \u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01')\npdf.ln(20)\n\n# Select a standard font (uses windows-1252)\npdf.set_font('Arial', '', 14)\npdf.ln(10)\npdf.write(5, 'This is standard built-in font')\n\npdf.output(\nunicode.pdf\n, 'F')\n\n\n\n\nView the result here: \n\nunicode.pdf\n\n\nMetric Files\n\n\nFPDF will try to automatically generate metrics (i.e. character widths) about \nTTF font files to speed up their processing.\n\n\nSuch metrics are stored using the Python Pickle format (\n.pkl\n extension), by \ndefault in the font directory (ensure read and write permission!). Additional \ninformation about the caching mechanism is defined in the\n\nadd_font\n reference.\n\n\nTTF metric files often weigh about 650K, so keep that in mind if you use many\nTTF fonts and have disk size or memory limitations.\n\n\nBy design, metric files are not imported as they could cause a temporary memory\nleak if not managed properly (this could be an issue in a webserver environment\nwith many processes or threads, so the current implementation discards metrics when\nFPDF objects are disposed).\n\n\nIn most circumstances, you will not notice any difference about storing metric\nfiles vs. generating them in each run on-the-fly (according basic tests, elapsed\ntime is equivalent; YMMV).\n\n\nLike the original PHP implementation, this library should work even if it could\nnot store the metric file, and as no source code file is generated at runtime,\nit should work in restricted environments.\n\n\nFree Font Pack and Copyright Restrictions\n\n\nFor your convenience, this library collected 96 TTF files in an optional \n\n\"Free Unicode TrueType Font Pack for FPDF\"\n, \nwith useful fonts commonly distributed with GNU/Linux operating systems (see \nabove for a complete description). This pack is included in the Windows \ninstallers, or can be downloaded separately (for any operating system).\n\n\nYou could use any TTF font file as long embedding usage is allowed in the licence.\nIf not, a runtime exception will be raised saying: \"ERROR - Font file \nfilename.ttf cannot be embedded due to copyright restrictions.\"", 
            "title": "Unicode"
        }, 
        {
            "location": "/Unicode/index.html#introduction", 
            "text": "Introduction  Example  Metric Files  Free Font Pack and Copyright Restrictions      The FPDF class was modified adding UTF-8 support.\nMoreover, it embeds only the necessary parts of the fonts that are used in the \ndocument, making the file size much smaller than if the whole fonts were \nembedded. These features were originally developed for the  mPDF  project, and ported from  Ian Back 's sFPDF  LGPL PHP version.  Before you can use UTF-8, you have to install at least one Unicode font in the \nfont directory (or system font folder). Some free font packages are available \nfor download (extract them into the font folder):    DejaVu  family: Sans, Sans Condensed, Serif,\nSerif Condensed, Sans Mono (Supports more than 200 languages)    GNU FreeFont  family: FreeSans,\nFreeSerif, FreeMono    Indic \n(ttf-indic-fonts Debian and Ubuntu package) for Bengali, Devanagari, Gujarati,\nGurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya,\nTamil, Telugu, Tibetan    AR PL New Sung  (firefly):\nThe Open Source Chinese Font (also supports other east Asian languages)    Alee  (ttf-alee Arch Linux\npackage): General purpose Hangul Truetype fonts that contain Korean syllable\nand Latin9 (iso8859-15) characters.    Fonts-TLWG  (formerly\nThaiFonts-Scalable)    These fonts are included with this library's installers; see  Free Font Pack for FPDF  below for\nmore information.  Then, to use a Unicode font in your script, pass  True  as the fourth parameter \nof  add_font .", 
            "title": "Introduction"
        }, 
        {
            "location": "/Unicode/index.html#example", 
            "text": "This example uses several free fonts to display some Unicode strings. Be sure to\ninstall the fonts in the  font  directory first.  #!/usr/bin/env python\n# -*- coding: utf8 -*-\n\nfrom fpdf import FPDF\n\npdf = FPDF()\npdf.add_page()\n\n# Add a DejaVu Unicode font (uses UTF-8)\n# Supports more than 200 languages. For a coverage status see:\n# http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt\npdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)\npdf.set_font('DejaVu', '', 14)\n\ntext = u \nEnglish: Hello World\nGreek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c2\nPolish: Witaj \u015bwiecie\nPortuguese: Ol\u00e1 mundo\nRussian: \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u041c\u0438\u0440\nVietnamese: Xin ch\u00e0o th\u1ebf gi\u1edbi\nArabic: \u0645\u0631\u062d\u0628\u0627 \u0627\u0644\u0639\u0627\u0644\u0645\nHebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd \n\nfor txt in text.split('\\n'):\n    pdf.write(8, txt)\n    pdf.ln(8)\n\n# Add a Indic Unicode font (uses UTF-8)\n# Supports: Bengali, Devanagari, Gujarati, \n#           Gurmukhi (including the variants for Punjabi) \n#           Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan\npdf.add_font('gargi', '', 'gargi.ttf', uni=True) \npdf.set_font('gargi', '', 14)\npdf.write(8, u'Hindi: \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e')\npdf.ln(20)\n\n# Add a AR PL New Sung Unicode font (uses UTF-8)\n# The Open Source Chinese Font (also supports other east Asian languages)\npdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True)\npdf.set_font('fireflysung', '', 14)\npdf.write(8, u'Chinese: \u4f60\u597d\u4e16\u754c\\n')\npdf.write(8, u'Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c\\n')\npdf.ln(10)\n\n# Add a Alee Unicode font (uses UTF-8)\n# General purpose Hangul truetype fonts that contain Korean syllable \n# and Latin9 (iso8859-15) characters.\npdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True)\npdf.set_font('eunjin', '', 14)\npdf.write(8, u'Korean: \uc548\ub155\ud558\uc138\uc694')\npdf.ln(20)\n\n# Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8)\npdf.add_font('waree', '', 'Waree.ttf', uni=True)\npdf.set_font('waree', '', 14)\npdf.write(8, u'Thai: \u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e0a\u0e32\u0e27\u0e42\u0e25\u0e01')\npdf.ln(20)\n\n# Select a standard font (uses windows-1252)\npdf.set_font('Arial', '', 14)\npdf.ln(10)\npdf.write(5, 'This is standard built-in font')\n\npdf.output( unicode.pdf , 'F')  View the result here:  unicode.pdf", 
            "title": "Example"
        }, 
        {
            "location": "/Unicode/index.html#metric-files", 
            "text": "FPDF will try to automatically generate metrics (i.e. character widths) about \nTTF font files to speed up their processing.  Such metrics are stored using the Python Pickle format ( .pkl  extension), by \ndefault in the font directory (ensure read and write permission!). Additional \ninformation about the caching mechanism is defined in the add_font  reference.  TTF metric files often weigh about 650K, so keep that in mind if you use many\nTTF fonts and have disk size or memory limitations.  By design, metric files are not imported as they could cause a temporary memory\nleak if not managed properly (this could be an issue in a webserver environment\nwith many processes or threads, so the current implementation discards metrics when\nFPDF objects are disposed).  In most circumstances, you will not notice any difference about storing metric\nfiles vs. generating them in each run on-the-fly (according basic tests, elapsed\ntime is equivalent; YMMV).  Like the original PHP implementation, this library should work even if it could\nnot store the metric file, and as no source code file is generated at runtime,\nit should work in restricted environments.", 
            "title": "Metric Files"
        }, 
        {
            "location": "/Unicode/index.html#free-font-pack-and-copyright-restrictions", 
            "text": "For your convenience, this library collected 96 TTF files in an optional  \"Free Unicode TrueType Font Pack for FPDF\" , \nwith useful fonts commonly distributed with GNU/Linux operating systems (see \nabove for a complete description). This pack is included in the Windows \ninstallers, or can be downloaded separately (for any operating system).  You could use any TTF font file as long embedding usage is allowed in the licence.\nIf not, a runtime exception will be raised saying: \"ERROR - Font file \nfilename.ttf cannot be embedded due to copyright restrictions.\"", 
            "title": "Free Font Pack and Copyright Restrictions"
        }, 
        {
            "location": "/ReferenceManual/index.html", 
            "text": "PyFPDF Reference Manual\n\n\n\n\n\n\nPyFPDF Reference Manual\n\n\nfpdf Python API\n\n\nClasses\n\n\nMethods\n\n\nPages\n\n\nMargins\n\n\nFonts\n\n\nLinks\n\n\nMetadata\n\n\nText\n\n\nGeometry\n\n\nColors\n\n\nImaging\n\n\n\n\n\n\n\n\n\n\nOriginal FPDF API\n\n\nAdditional API\n\n\n\n\n\n\n\n\n\n\nfpdf Python API\n\n\nClasses\n\n\n\n\nFPDF\n - constructor\n\n\n\n\nMethods\n\n\nPages\n\n\n\n\nadd_page\n - add a new page\n\n\npage_no\n - page number\n\n\nalias_nb_pages\n - define an alias for number of pages\n\n\nclose\n - terminate the document \n(internal api)\n\n\noutput\n - save or send the document\n\n\nheader\n - page header\n\n\nfooter\n - page footer\n\n\n\n\nMargins\n\n\n\n\nset_margins\n - set margins\n\n\nset_left_margin\n - set left margin\n\n\nset_right_margin\n - set right margin\n\n\nset_top_margin\n - set top margin\n\n\nset_auto_page_break\n - set the automatic page breaking mode\n\n\n\n\nFonts\n\n\n\n\nadd_font\n - add a new font\n\n\nset_font\n - set font\n\n\nset_font_size\n - set font size\n\n\n\n\nLinks\n\n\n\n\nlink\n - put a link\n\n\nadd_link\n - create an internal link\n\n\nset_link\n - set internal link destination\n\n\n\n\nMetadata\n\n\n\n\nset_author\n - set the document author\n\n\nset_compression\n - turn compression on or off\n\n\nset_creator\n - set document creator\n\n\nset_keywords\n - associate keywords with document\n\n\nset_subject\n - set document subject\n\n\nset_title\n - set document title\n\n\nset_display_mode\n - set display mode\n\n\n\n\nText\n\n\n\n\ntext\n - print a string\n\n\nwrite\n - print flowing text\n\n\ncell\n - print a cell\n\n\nmulti_cell\n - print text with line breaks\n\n\nget_string_width\n - compute string length\n\n\nln\n - line break\n\n\nset_line_width\n - set line width\n\n\n\n\nGeometry\n\n\n\n\nget_x\n - get current x position\n\n\nget_y\n - get current y position\n\n\nset_x\n - set current x position\n\n\nset_xy\n - set current x and y positions\n\n\nset_y\n - set current y position\n\n\nline\n - draw a line\n\n\nrect\n - draw a rectangle\n\n\n\n\nColors\n\n\n\n\nset_draw_color\n - set drawing color\n\n\nset_fill_color\n - set filling color\n\n\nset_text_color\n - set text color\n\n\n\n\nImaging\n\n\n\n\nimage\n - output an image\n\n\n\n\nOriginal FPDF API\n\n\nImportant\n: the original FPDF (PHP) naming convention is CamelCase. This library uses \nPEP8's\n lower_case_with_underscores recommendation.\n\n\nThe contents of this section are the same as those of the previous section except organized like the PHP Library. This is also the format that was used in versions 1.x.x of this library. For the \nPHP documentation\n refer to the \nFPDF\n website.\n\n\n\n\naccept_page_break\n - determine whether to issue automatic page break\n\n\nadd_font\n - add a new font\n\n\nadd_link\n - create an internal link\n\n\nadd_page\n - add a new page\n\n\nalias_nb_pages\n - define an alias for number of pages\n\n\ncell\n - print a cell\n\n\nclose\n - terminate the document\n\n\nerror\n - fatal error\n\n\nfooter\n - page footer\n\n\nFPDF\n - constructor\n\n\nget_string_width\n - compute string length\n\n\nget_x\n - get current x position\n\n\nget_y\n - get current y position\n\n\nheader\n - page header\n\n\nimage\n - output an image\n\n\nline\n - draw a line\n\n\nlink\n - put a link\n\n\nln\n - line break\n\n\nmulti_cell\n - print text with line breaks\n\n\noutput\n - save or send the document\n\n\npage_no\n - page number\n\n\nrect\n - draw a rectangle\n\n\nset_author\n - set the document author\n\n\nset_auto_page_break\n - set the automatic page breaking mode\n\n\nset_compression\n - turn compression on or off\n\n\nset_creator\n - set document creator\n\n\nset_display_mode\n - set display mode\n\n\nset_draw_color\n - set drawing color\n\n\nset_fill_color\n - set filling color\n\n\nset_font\n - set font\n\n\nset_font_size\n - set font size\n\n\nset_keywords\n - associate keywords with document\n\n\nset_left_margin\n - set left margin\n\n\nset_line_width\n - set line width\n\n\nset_link\n - set internal link destination\n\n\nset_margins\n - set margins\n\n\nset_right_margin\n - set right margin\n\n\nset_subject\n - set document subject\n\n\nset_text_color\n - set text color\n\n\nset_title\n - set document title\n\n\nset_top_margin\n - set top margin\n\n\nset_x\n - set current x position\n\n\nset_xy\n - set current x and y positions\n\n\nset_y\n - set current y position\n\n\ntext\n - print a string\n\n\nwrite\n - print flowing text\n\n\n\n\nAdditional API\n\n\nThese features are not available in the original FPDF and were implemented after forking.\n\n\n\n\ndashed_line\n - draw a dashed line\n\n\nellipse\n - draw an ellipse\n\n\nset_doc_option\n - set document options\n\n\nset_stretching\n - set horizontal font stretching\n\n\nwrite_html\n - print text with HTML markup \nObsolete, under review.", 
            "title": "Reference Manual"
        }, 
        {
            "location": "/ReferenceManual/index.html#pyfpdf-reference-manual", 
            "text": "PyFPDF Reference Manual  fpdf Python API  Classes  Methods  Pages  Margins  Fonts  Links  Metadata  Text  Geometry  Colors  Imaging      Original FPDF API  Additional API", 
            "title": "PyFPDF Reference Manual"
        }, 
        {
            "location": "/ReferenceManual/index.html#fpdf-python-api", 
            "text": "", 
            "title": "fpdf Python API"
        }, 
        {
            "location": "/ReferenceManual/index.html#classes", 
            "text": "FPDF  - constructor", 
            "title": "Classes"
        }, 
        {
            "location": "/ReferenceManual/index.html#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/ReferenceManual/index.html#pages", 
            "text": "add_page  - add a new page  page_no  - page number  alias_nb_pages  - define an alias for number of pages  close  - terminate the document  (internal api)  output  - save or send the document  header  - page header  footer  - page footer", 
            "title": "Pages"
        }, 
        {
            "location": "/ReferenceManual/index.html#margins", 
            "text": "set_margins  - set margins  set_left_margin  - set left margin  set_right_margin  - set right margin  set_top_margin  - set top margin  set_auto_page_break  - set the automatic page breaking mode", 
            "title": "Margins"
        }, 
        {
            "location": "/ReferenceManual/index.html#fonts", 
            "text": "add_font  - add a new font  set_font  - set font  set_font_size  - set font size", 
            "title": "Fonts"
        }, 
        {
            "location": "/ReferenceManual/index.html#links", 
            "text": "link  - put a link  add_link  - create an internal link  set_link  - set internal link destination", 
            "title": "Links"
        }, 
        {
            "location": "/ReferenceManual/index.html#metadata", 
            "text": "set_author  - set the document author  set_compression  - turn compression on or off  set_creator  - set document creator  set_keywords  - associate keywords with document  set_subject  - set document subject  set_title  - set document title  set_display_mode  - set display mode", 
            "title": "Metadata"
        }, 
        {
            "location": "/ReferenceManual/index.html#text", 
            "text": "text  - print a string  write  - print flowing text  cell  - print a cell  multi_cell  - print text with line breaks  get_string_width  - compute string length  ln  - line break  set_line_width  - set line width", 
            "title": "Text"
        }, 
        {
            "location": "/ReferenceManual/index.html#geometry", 
            "text": "get_x  - get current x position  get_y  - get current y position  set_x  - set current x position  set_xy  - set current x and y positions  set_y  - set current y position  line  - draw a line  rect  - draw a rectangle", 
            "title": "Geometry"
        }, 
        {
            "location": "/ReferenceManual/index.html#colors", 
            "text": "set_draw_color  - set drawing color  set_fill_color  - set filling color  set_text_color  - set text color", 
            "title": "Colors"
        }, 
        {
            "location": "/ReferenceManual/index.html#imaging", 
            "text": "image  - output an image", 
            "title": "Imaging"
        }, 
        {
            "location": "/ReferenceManual/index.html#original-fpdf-api", 
            "text": "Important : the original FPDF (PHP) naming convention is CamelCase. This library uses  PEP8's  lower_case_with_underscores recommendation.  The contents of this section are the same as those of the previous section except organized like the PHP Library. This is also the format that was used in versions 1.x.x of this library. For the  PHP documentation  refer to the  FPDF  website.   accept_page_break  - determine whether to issue automatic page break  add_font  - add a new font  add_link  - create an internal link  add_page  - add a new page  alias_nb_pages  - define an alias for number of pages  cell  - print a cell  close  - terminate the document  error  - fatal error  footer  - page footer  FPDF  - constructor  get_string_width  - compute string length  get_x  - get current x position  get_y  - get current y position  header  - page header  image  - output an image  line  - draw a line  link  - put a link  ln  - line break  multi_cell  - print text with line breaks  output  - save or send the document  page_no  - page number  rect  - draw a rectangle  set_author  - set the document author  set_auto_page_break  - set the automatic page breaking mode  set_compression  - turn compression on or off  set_creator  - set document creator  set_display_mode  - set display mode  set_draw_color  - set drawing color  set_fill_color  - set filling color  set_font  - set font  set_font_size  - set font size  set_keywords  - associate keywords with document  set_left_margin  - set left margin  set_line_width  - set line width  set_link  - set internal link destination  set_margins  - set margins  set_right_margin  - set right margin  set_subject  - set document subject  set_text_color  - set text color  set_title  - set document title  set_top_margin  - set top margin  set_x  - set current x position  set_xy  - set current x and y positions  set_y  - set current y position  text  - print a string  write  - print flowing text", 
            "title": "Original FPDF API"
        }, 
        {
            "location": "/ReferenceManual/index.html#additional-api", 
            "text": "These features are not available in the original FPDF and were implemented after forking.   dashed_line  - draw a dashed line  ellipse  - draw an ellipse  set_doc_option  - set document options  set_stretching  - set horizontal font stretching  write_html  - print text with HTML markup  Obsolete, under review.", 
            "title": "Additional API"
        }, 
        {
            "location": "/reference/accept_page_break/index.html", 
            "text": "accept_page_break\n\n\nfpdf.accept_page_break()\n\n\n\n\nDescription\n\n\nWhenever a page break condition is met, this method is called, and the break is issued or not depending on the returned value. The default implementation returns a value according to the mode selected by \nset_auto_page_break\n. \nThis method is called automatically and should not be called directly by the application.\n\n\nSee also\n\n\nset_auto_page_break\n.", 
            "title": "accept_page_break"
        }, 
        {
            "location": "/reference/accept_page_break/index.html#accept_page_break", 
            "text": "fpdf.accept_page_break()", 
            "title": "accept_page_break"
        }, 
        {
            "location": "/reference/accept_page_break/index.html#description", 
            "text": "Whenever a page break condition is met, this method is called, and the break is issued or not depending on the returned value. The default implementation returns a value according to the mode selected by  set_auto_page_break . \nThis method is called automatically and should not be called directly by the application.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/accept_page_break/index.html#see-also", 
            "text": "set_auto_page_break .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/add_font/index.html", 
            "text": "add_font\n\n\nfpdf.add_font(family: str, style = '', fname = '', uni = False)\n\n\n\n\nDescription\n\n\nImports a TrueType, OpenType or Type1 font and makes it available.\n\n\nWarning:\n for Type1 and legacy fonts it is necessary to generate a font definition file first with the \nMakeFont\n utility. This feature is currently deprecated in favour of TrueType Unicode font support (whose fonts are automatically processed with the included \nttfonts.py\n utility).\n\n\nNote\n: the font source files must be accessible. They are searched successively in (if these constants are defined):\n\n\n\n\nFPDF_FONTPATH\n (by default, the \nfont\n folder in the fpdf package directory)\n\n\nSYSTEM_TTFONTS\n (e.g. \nC:\\WINDOWS\\FONTS\n)\n\n\n\n\nIf the file corresponding to the requested font is not found, the runtime exception \"TTF Font file not found: ...\" is raised.\n\n\nFor more information, see the \nUnicode\n support page.\n\n\nThis method should be called before the \nset_font\n method is used, and the font will be available for the whole document.\n\n\nNote\n: due to the fact that font processing can occupy large amount of time, some data are cached.\n\n\nCache files are created in same folder by default. This can be changed by setting the \nFPDF_CACHE_MODE\n constant:\n\n\n\n\n0 - (by default), store the cache in the same folder as the font file\n\n\n1 - disable all caching\n\n\n2 - store cache files in the \nFPDF_CACHE_DIR\n directory with cryptic names\n\n\n\n\nParameters\n\n\nfamily:\n\n\n\n\nFont family. Used as a reference for \nset_font\n, for example: \n'dejavu'\n.\n\n\n\n\nstyle:\n\n\n\n\nFont style. Deprecated, maintained only for backward compatibility.\n\n\n\n\nfname:\n\n\n\n\nFont file name (e.g. \n'DejaVuSansCondensed.ttf'\n). You can specify a full path; if not, the file will be searched in \nFPDF_FONTPATH\n or \nSYSTEM_TTFONTS\n.\n\n\n\n\nuni:\n\n\n\n\nTTF Unicode flag (if set to \nTrue\n, TrueType font subset embedding will be enabled and text will be treated as \nutf8\n by default).\n\n\n\n\nYou must \nnot\n call \nadd_font\n for the standard PDF Latin-1 fonts (Courier, Helvetica, Times, Symbol, Zapfdingbats); use \nset_font\n directly in that case.\n\n\nCalling this method with uni=False is discouraged as legacy font support is complex and deprecated.\n\n\nExample\n\n\n# Add a Unicode free font\npdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)\n\n# Add a Unicode system font (using full path)\npdf.add_font('sysfont', '', r\nc:\\WINDOWS\\Fonts\\arial.ttf\n, uni=True)\n\n\n\n\nSee also\n\n\nset_font\n, \nset_font_size\n, \ncell\n, \nmulti_cell\n, \nwrite\n.", 
            "title": "add_font"
        }, 
        {
            "location": "/reference/add_font/index.html#add_font", 
            "text": "fpdf.add_font(family: str, style = '', fname = '', uni = False)", 
            "title": "add_font"
        }, 
        {
            "location": "/reference/add_font/index.html#description", 
            "text": "Imports a TrueType, OpenType or Type1 font and makes it available.  Warning:  for Type1 and legacy fonts it is necessary to generate a font definition file first with the  MakeFont  utility. This feature is currently deprecated in favour of TrueType Unicode font support (whose fonts are automatically processed with the included  ttfonts.py  utility).  Note : the font source files must be accessible. They are searched successively in (if these constants are defined):   FPDF_FONTPATH  (by default, the  font  folder in the fpdf package directory)  SYSTEM_TTFONTS  (e.g.  C:\\WINDOWS\\FONTS )   If the file corresponding to the requested font is not found, the runtime exception \"TTF Font file not found: ...\" is raised.  For more information, see the  Unicode  support page.  This method should be called before the  set_font  method is used, and the font will be available for the whole document.  Note : due to the fact that font processing can occupy large amount of time, some data are cached.  Cache files are created in same folder by default. This can be changed by setting the  FPDF_CACHE_MODE  constant:   0 - (by default), store the cache in the same folder as the font file  1 - disable all caching  2 - store cache files in the  FPDF_CACHE_DIR  directory with cryptic names", 
            "title": "Description"
        }, 
        {
            "location": "/reference/add_font/index.html#parameters", 
            "text": "family:   Font family. Used as a reference for  set_font , for example:  'dejavu' .   style:   Font style. Deprecated, maintained only for backward compatibility.   fname:   Font file name (e.g.  'DejaVuSansCondensed.ttf' ). You can specify a full path; if not, the file will be searched in  FPDF_FONTPATH  or  SYSTEM_TTFONTS .   uni:   TTF Unicode flag (if set to  True , TrueType font subset embedding will be enabled and text will be treated as  utf8  by default).   You must  not  call  add_font  for the standard PDF Latin-1 fonts (Courier, Helvetica, Times, Symbol, Zapfdingbats); use  set_font  directly in that case.  Calling this method with uni=False is discouraged as legacy font support is complex and deprecated.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/add_font/index.html#example", 
            "text": "# Add a Unicode free font\npdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)\n\n# Add a Unicode system font (using full path)\npdf.add_font('sysfont', '', r c:\\WINDOWS\\Fonts\\arial.ttf , uni=True)", 
            "title": "Example"
        }, 
        {
            "location": "/reference/add_font/index.html#see-also", 
            "text": "set_font ,  set_font_size ,  cell ,  multi_cell ,  write .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/add_link/index.html", 
            "text": "add_link\n\n\nfpdf.add_link()\n\n\n\n\nDescription\n\n\nCreates a new internal link and returns its identifier. An internal link is a clickable area which directs to another place within the document. \nThe identifier can then be passed to \ncell\n, \nwrite\n, \nimage\n or \nlink\n. The destination is defined with \nset_link\n.\n\n\nSee also\n\n\ncell\n, \nwrite\n, \nimage\n, \nlink\n, \nset_link\n.", 
            "title": "add_link"
        }, 
        {
            "location": "/reference/add_link/index.html#add_link", 
            "text": "fpdf.add_link()", 
            "title": "add_link"
        }, 
        {
            "location": "/reference/add_link/index.html#description", 
            "text": "Creates a new internal link and returns its identifier. An internal link is a clickable area which directs to another place within the document. \nThe identifier can then be passed to  cell ,  write ,  image  or  link . The destination is defined with  set_link .", 
            "title": "Description"
        }, 
        {
            "location": "/reference/add_link/index.html#see-also", 
            "text": "cell ,  write ,  image ,  link ,  set_link .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/add_page/index.html", 
            "text": "add_page\n\n\nfpdf.add_page(orientation = '', format = '', same = False)\n\n\n\n\nDescription\n\n\nAdds a new page to the document. If a page is already present, the \n\nfooter\n method is called first to output the footer. Then the page \nis added, the current position set to the top-left corner according to the left\nand top margins, and \nheader\n is called to display the header.\n\n\nThe font which was set before calling is automatically restored. There is no \nneed to call \nset_font\n again if you want to continue with the same \nfont. Colors and the line width are also preserved.\n\n\nThe origin of the coordinate system is at the top-left corner and increasing \nordinates go downwards.\n\n\nParameters\n\n\norientation:\n\n\n\n\nPage orientation. Possible values are (case insensitive):\n\n\n\n\n\n\nP or Portrait\n\n\nL or Landscape\n\n\n\n\n\n\nThe default value is the one passed to the constructor.\n\n\n\n\nformat:\n\n\n\n\nThe format used for pages. It can be either one of the following values (case\ninsensitive):\n\n\n\n\n\n\nA3\n\n\nA4\n\n\nA5\n\n\nLetter\n\n\nLegal\n\n\n\n\n\n\nor a tuple containing the width and the height (expressed in the\ngiven unit). In portrait orientation, the tuple should be in the order\n(\nwidth\n, \nheight\n), but in landscape orientation, the order should be\n(\nheight\n, \nwidth\n). In either case, the first tuple element is usually less\nthan the second.\n\n\nThe default value is the one passed to the constructor.\n\n\n\n\nsame:\n\n\n\n\nTrue if page must be same as previous. In this case other parameters are\nignored.\n\n\n\n\nSee also\n\n\nFPDF\n, \nheader\n, \nfooter\n, \n\nset_margins\n.", 
            "title": "add_page"
        }, 
        {
            "location": "/reference/add_page/index.html#add_page", 
            "text": "fpdf.add_page(orientation = '', format = '', same = False)", 
            "title": "add_page"
        }, 
        {
            "location": "/reference/add_page/index.html#description", 
            "text": "Adds a new page to the document. If a page is already present, the  footer  method is called first to output the footer. Then the page \nis added, the current position set to the top-left corner according to the left\nand top margins, and  header  is called to display the header.  The font which was set before calling is automatically restored. There is no \nneed to call  set_font  again if you want to continue with the same \nfont. Colors and the line width are also preserved.  The origin of the coordinate system is at the top-left corner and increasing \nordinates go downwards.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/add_page/index.html#parameters", 
            "text": "orientation:   Page orientation. Possible values are (case insensitive):    P or Portrait  L or Landscape    The default value is the one passed to the constructor.   format:   The format used for pages. It can be either one of the following values (case\ninsensitive):    A3  A4  A5  Letter  Legal    or a tuple containing the width and the height (expressed in the\ngiven unit). In portrait orientation, the tuple should be in the order\n( width ,  height ), but in landscape orientation, the order should be\n( height ,  width ). In either case, the first tuple element is usually less\nthan the second.  The default value is the one passed to the constructor.   same:   True if page must be same as previous. In this case other parameters are\nignored.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/add_page/index.html#see-also", 
            "text": "FPDF ,  header ,  footer ,  set_margins .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/alias_nb_pages/index.html", 
            "text": "alias_nb_pages\n\n\nfpdf.alias_nb_pages()\n\n\n\n\nDescription\n\n\nDefines an alias for the total number of pages. It will be substituted as the document is closed.\n\n\nParameters\n\n\nalias:\n\n\n\n\nThe alias. Default value: {nb}.\n\n\n\n\nExample\n\n\nclass PDF(FPDF):\n    def footer(self):\n        # Go to 1.5 cm from bottom\n        self.set_y(-15)\n        # Select Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Print current and total page numbers\n        self.cell(0, 10, 'Page %s' % self.page_no() + '/{nb}', 0, 0, 'C')\n\npdf = PDF()\npdf.alias_nb_pages()\n\n\n\n\n\nSee also\n\n\npage_no\n, \nfooter\n.", 
            "title": "alias_nb_pages"
        }, 
        {
            "location": "/reference/alias_nb_pages/index.html#alias_nb_pages", 
            "text": "fpdf.alias_nb_pages()", 
            "title": "alias_nb_pages"
        }, 
        {
            "location": "/reference/alias_nb_pages/index.html#description", 
            "text": "Defines an alias for the total number of pages. It will be substituted as the document is closed.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/alias_nb_pages/index.html#parameters", 
            "text": "alias:   The alias. Default value: {nb}.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/alias_nb_pages/index.html#example", 
            "text": "class PDF(FPDF):\n    def footer(self):\n        # Go to 1.5 cm from bottom\n        self.set_y(-15)\n        # Select Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Print current and total page numbers\n        self.cell(0, 10, 'Page %s' % self.page_no() + '/{nb}', 0, 0, 'C')\n\npdf = PDF()\npdf.alias_nb_pages()", 
            "title": "Example"
        }, 
        {
            "location": "/reference/alias_nb_pages/index.html#see-also", 
            "text": "page_no ,  footer .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/cell/index.html", 
            "text": "cell\n\n\nfpdf.cell(w, h = 0, txt = '', border = 0, ln = 0, \n          align = '', fill = False, link = '')\n\n\n\n\nDescription\n\n\nPrints a cell (rectangular area) with optional borders, background color and \ncharacter string. The upper-left corner of the cell corresponds to the current \nposition. The text can be aligned or centered. After the call, the current \nposition moves to the right or to the next line. It is possible to put a link \non the text.\n\n\nIf automatic page breaking is enabled and the cell goes beyond the limit, a \npage break is done before outputting.\n\n\nParameters\n\n\nw:\n\n\n\n\nCell width. If 0, the cell extends up to the right margin.\n\n\n\n\nh:\n\n\n\n\nCell height. Default value: 0.\n\n\n\n\ntxt:\n\n\n\n\nString to print. Default value: empty string.\n\n\n\n\nborder:\n\n\n\n\nIndicates if borders must be drawn around the cell. The value can be either a \n  number:\n\n\n\n\n\n\n0: no border\n\n\n1: frame\n\n\n\n\n\n\nor a string containing some or all of the following characters (in any order):\n\n\n\n\n\n\nL\n: left\n\n\nT\n: top\n\n\nR\n: right\n\n\nB\n: bottom\n\n\n\n\n\n\nDefault value: 0.\n\n\n\n\nln:\n\n\n\n\nIndicates where the current position should go after the call. Possible \n  values are:\n\n\n\n\n\n\n0: to the right\n\n\n1: to the beginning of the next line\n\n\n2: below\n\n\n\n\n\n\nPutting 1 is equivalent to putting 0 and calling \nln\n just after. \n  Default value: 0.\n\n\n\n\nalign:\n\n\n\n\nAllows to center or align the text. Possible values are:\n\n\n\n\n\n\nL\n or empty string: left align (default value)\n\n\nC\n: center\n\n\nR\n: right align\n\n\n\n\n\n\n\n\nfill:\n\n\n\n\nIndicates if the cell background must be painted (\nTrue\n) or transparent \n  (\nFalse\n). Default value: False.\n\n\n\n\nlink:\n\n\n\n\nURL or identifier returned by \nadd_link\n.\n\n\n\n\nExample\n\n\n# Set font\npdf.set_font('Arial', 'B', 16)\n# Move to 8 cm to the right\npdf.cell(80)\n# Centered text in a framed 20*10 mm cell and line break\npdf.cell(20, 10, 'Title', 1, 1, 'C')\n\n\n\n\nSee also\n\n\nset_font\n, \nset_doc_option\n, \n\nset_draw_color\n, \nset_fill_color\n, \n\nset_text_color\n, \nset_line_width\n, \n\nadd_link\n, \nln\n, \nmulti_cell\n, \n\nwrite\n, \nset_auto_page_break\n.", 
            "title": "cell"
        }, 
        {
            "location": "/reference/cell/index.html#cell", 
            "text": "fpdf.cell(w, h = 0, txt = '', border = 0, ln = 0, \n          align = '', fill = False, link = '')", 
            "title": "cell"
        }, 
        {
            "location": "/reference/cell/index.html#description", 
            "text": "Prints a cell (rectangular area) with optional borders, background color and \ncharacter string. The upper-left corner of the cell corresponds to the current \nposition. The text can be aligned or centered. After the call, the current \nposition moves to the right or to the next line. It is possible to put a link \non the text.  If automatic page breaking is enabled and the cell goes beyond the limit, a \npage break is done before outputting.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/cell/index.html#parameters", 
            "text": "w:   Cell width. If 0, the cell extends up to the right margin.   h:   Cell height. Default value: 0.   txt:   String to print. Default value: empty string.   border:   Indicates if borders must be drawn around the cell. The value can be either a \n  number:    0: no border  1: frame    or a string containing some or all of the following characters (in any order):    L : left  T : top  R : right  B : bottom    Default value: 0.   ln:   Indicates where the current position should go after the call. Possible \n  values are:    0: to the right  1: to the beginning of the next line  2: below    Putting 1 is equivalent to putting 0 and calling  ln  just after. \n  Default value: 0.   align:   Allows to center or align the text. Possible values are:    L  or empty string: left align (default value)  C : center  R : right align     fill:   Indicates if the cell background must be painted ( True ) or transparent \n  ( False ). Default value: False.   link:   URL or identifier returned by  add_link .", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/cell/index.html#example", 
            "text": "# Set font\npdf.set_font('Arial', 'B', 16)\n# Move to 8 cm to the right\npdf.cell(80)\n# Centered text in a framed 20*10 mm cell and line break\npdf.cell(20, 10, 'Title', 1, 1, 'C')", 
            "title": "Example"
        }, 
        {
            "location": "/reference/cell/index.html#see-also", 
            "text": "set_font ,  set_doc_option ,  set_draw_color ,  set_fill_color ,  set_text_color ,  set_line_width ,  add_link ,  ln ,  multi_cell ,  write ,  set_auto_page_break .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/close/index.html", 
            "text": "close\n\n\nfpdf.close()\n\n\n\n\nDescription\n\n\nTerminates the PDF document. It is not necessary to call this method explicitly because \noutput\n does it automatically. \nIf the document contains no page, \nadd_page\n is called to prevent from getting an invalid document.\n\n\nSee also\n\n\nopen\n, \noutput\n.", 
            "title": "close"
        }, 
        {
            "location": "/reference/close/index.html#close", 
            "text": "fpdf.close()", 
            "title": "close"
        }, 
        {
            "location": "/reference/close/index.html#description", 
            "text": "Terminates the PDF document. It is not necessary to call this method explicitly because  output  does it automatically. \nIf the document contains no page,  add_page  is called to prevent from getting an invalid document.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/close/index.html#see-also", 
            "text": "open ,  output .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/dashed_line/index.html", 
            "text": "dashed_line\n\n\nfpdf.dashed_line(x1, y1, x2, y2, dash_length = 1, space_length = 1)\n\n\n\n\nDescription\n\n\nDraw a dashed line between two points. Same interface as \nline\n except the two parameters dash_length and space_length.\n\n\nParameters\n\n\nx1:\n\n\n\n\nAbscissa of first point\n\n\n\n\ny1:\n\n\n\n\nOrdinate of first point\n\n\n\n\nx2:\n\n\n\n\nAbscissa of second point\n\n\n\n\ny2:\n\n\n\n\nOrdinate of second point\n\n\n\n\ndash_length:\n\n\n\n\nLength of the dash\n\n\n\n\nspace_length:\n\n\n\n\nLength of the space between dashes\n\n\n\n\nExample\n\n\n# Adds a dashed line beginning at point (10,30), \n#  ending at point (110,30) with a \n#  dash length of 1 and a space length of 10.\npdf.dashed_line(10, 30, 110, 30, 1, 10)\n\n\n\n\nSee also\n\n\nline\n.", 
            "title": "dashed_line"
        }, 
        {
            "location": "/reference/dashed_line/index.html#dashed_line", 
            "text": "fpdf.dashed_line(x1, y1, x2, y2, dash_length = 1, space_length = 1)", 
            "title": "dashed_line"
        }, 
        {
            "location": "/reference/dashed_line/index.html#description", 
            "text": "Draw a dashed line between two points. Same interface as  line  except the two parameters dash_length and space_length.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/dashed_line/index.html#parameters", 
            "text": "x1:   Abscissa of first point   y1:   Ordinate of first point   x2:   Abscissa of second point   y2:   Ordinate of second point   dash_length:   Length of the dash   space_length:   Length of the space between dashes", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/dashed_line/index.html#example", 
            "text": "# Adds a dashed line beginning at point (10,30), \n#  ending at point (110,30) with a \n#  dash length of 1 and a space length of 10.\npdf.dashed_line(10, 30, 110, 30, 1, 10)", 
            "title": "Example"
        }, 
        {
            "location": "/reference/dashed_line/index.html#see-also", 
            "text": "line .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/ellipse/index.html", 
            "text": "ellipse\n\n\nfpdf.ellipse(x: float, y: float, w: float, h: float, style = '')\n\n\n\n\nDescription\n\n\nOutputs an ellipse. It can be drawn (border only), filled (with no border) or \nboth. Unlike the PHP version, this function uses the top-left position and \nwidth and height of the ellipse, like \nrect\n, not the center point and \nradius.\n\n\nParameters\n\n\nx:\n\n\n\n\nAbscissa of upper-left bounging box.\n\n\n\n\ny:\n\n\n\n\nOrdinate of upper-left bounging box.\n\n\n\n\nw:\n\n\n\n\nWidth.\n\n\n\n\nh:\n\n\n\n\nHeight.\n\n\n\n\nstyle:\n\n\n\n\nStyle of rendering. Possible values are:\n\n\n\n\n\n\nD\n or empty string: draw. This is the default value.\n\n\nF\n: fill\n\n\nDF\n or \nFD\n: draw and fill\n\n\n\n\n\n\n\n\nSee also\n\n\ncell\n, \nrect\n.", 
            "title": "ellipse"
        }, 
        {
            "location": "/reference/ellipse/index.html#ellipse", 
            "text": "fpdf.ellipse(x: float, y: float, w: float, h: float, style = '')", 
            "title": "ellipse"
        }, 
        {
            "location": "/reference/ellipse/index.html#description", 
            "text": "Outputs an ellipse. It can be drawn (border only), filled (with no border) or \nboth. Unlike the PHP version, this function uses the top-left position and \nwidth and height of the ellipse, like  rect , not the center point and \nradius.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/ellipse/index.html#parameters", 
            "text": "x:   Abscissa of upper-left bounging box.   y:   Ordinate of upper-left bounging box.   w:   Width.   h:   Height.   style:   Style of rendering. Possible values are:    D  or empty string: draw. This is the default value.  F : fill  DF  or  FD : draw and fill", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/ellipse/index.html#see-also", 
            "text": "cell ,  rect .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/error/index.html", 
            "text": "error\n\n\nfpdf.error(msg: str)\n\n\n\n\nDescription\n\n\nThis method is automatically called in case of fatal error; it simply outputs the message and halts the execution. An inherited class may override it to customize the error handling but should always halt the script, or the resulting document would probably be invalid.\n\n\nParameters\n\n\nmsg:\n\n\n\n\nThe error message.", 
            "title": "error"
        }, 
        {
            "location": "/reference/error/index.html#error", 
            "text": "fpdf.error(msg: str)", 
            "title": "error"
        }, 
        {
            "location": "/reference/error/index.html#description", 
            "text": "This method is automatically called in case of fatal error; it simply outputs the message and halts the execution. An inherited class may override it to customize the error handling but should always halt the script, or the resulting document would probably be invalid.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/error/index.html#parameters", 
            "text": "msg:   The error message.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/FPDF/index.html", 
            "text": "FPDF\n\n\nfpdf = FPDF(orientation = 'P', unit = 'mm', format='A4')\n\n\n\n\nDescription\n\n\nThis is the class constructor. It allows setting up the page format, the orientation and the unit of measurement used in all methods (except for font sizes).\n\n\nParameters\n\n\norientation:\n\n\n\n\nDefault page orientation. Possible values are (case insensitive):\n\n\n\n\n\n\nP or Portrait\n\n\nL or Landscape\n\n\n\n\n\n\nThe default value is P.\n\n\n\n\nunit:\n\n\n\n\nUser unit. Possible values are:\n\n\n\n\n\n\npt: point\n\n\nmm: millimeter\n\n\ncm: centimeter\n\n\nin: inch\n\n\n\n\n\n\nA point equals 1/72 of an inch, that is to say about 0.35 mm (an inch being 2.54 cm). This is a very common unit in typography; font sizes are expressed in this unit.\nThe default value is mm.\n\n\n\n\nformat:\n\n\n\n\nThe format used for pages. It can be any one of the following values (case insensitive):\n\n\n\n\n\n\nA3\n\n\nA4\n\n\nA5\n\n\nLetter\n\n\nLegal\n\n\n\n\n\n\nor a tuple containing the width and the height (expressed in the given unit). In portrait orientation, the tuple should be in the order (\nwidth\n, \nheight\n), but in landscape orientation, the order should be (\nheight\n, \nwidth\n). In either case, the first tuple element is usually less than the second.\n\n\nThe default value is A4.\n\n\n\n\nExample\n\n\nExample with a custom 100x150 mm page format:\n\n\npdf = FPDF('P', 'mm', (100, 150))", 
            "title": "FPDF"
        }, 
        {
            "location": "/reference/FPDF/index.html#fpdf", 
            "text": "fpdf = FPDF(orientation = 'P', unit = 'mm', format='A4')", 
            "title": "FPDF"
        }, 
        {
            "location": "/reference/FPDF/index.html#description", 
            "text": "This is the class constructor. It allows setting up the page format, the orientation and the unit of measurement used in all methods (except for font sizes).", 
            "title": "Description"
        }, 
        {
            "location": "/reference/FPDF/index.html#parameters", 
            "text": "orientation:   Default page orientation. Possible values are (case insensitive):    P or Portrait  L or Landscape    The default value is P.   unit:   User unit. Possible values are:    pt: point  mm: millimeter  cm: centimeter  in: inch    A point equals 1/72 of an inch, that is to say about 0.35 mm (an inch being 2.54 cm). This is a very common unit in typography; font sizes are expressed in this unit.\nThe default value is mm.   format:   The format used for pages. It can be any one of the following values (case insensitive):    A3  A4  A5  Letter  Legal    or a tuple containing the width and the height (expressed in the given unit). In portrait orientation, the tuple should be in the order ( width ,  height ), but in landscape orientation, the order should be ( height ,  width ). In either case, the first tuple element is usually less than the second.  The default value is A4.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/FPDF/index.html#example", 
            "text": "Example with a custom 100x150 mm page format:  pdf = FPDF('P', 'mm', (100, 150))", 
            "title": "Example"
        }, 
        {
            "location": "/reference/footer/index.html", 
            "text": "footer\n\n\nfpdf.footer()\n\n\n\n\nDescription\n\n\nThis method is used to render the page footer. It is automatically called by \nadd_page\n and \nclose\n and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing.\n\n\nExample\n\n\nclass PDF(FPDF):\n    def footer(self):\n        # Go to 1.5 cm from bottom\n        self.set_y(-15)\n        # Select Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Print centered page number\n        self.cell(0, 10, 'Page %s' % self.page_no(), 0, 0, 'C')\n\n\n\n\nSee also\n\n\nadd_page\n, \nheader\n.", 
            "title": "footer"
        }, 
        {
            "location": "/reference/footer/index.html#footer", 
            "text": "fpdf.footer()", 
            "title": "footer"
        }, 
        {
            "location": "/reference/footer/index.html#description", 
            "text": "This method is used to render the page footer. It is automatically called by  add_page  and  close  and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/footer/index.html#example", 
            "text": "class PDF(FPDF):\n    def footer(self):\n        # Go to 1.5 cm from bottom\n        self.set_y(-15)\n        # Select Arial italic 8\n        self.set_font('Arial', 'I', 8)\n        # Print centered page number\n        self.cell(0, 10, 'Page %s' % self.page_no(), 0, 0, 'C')", 
            "title": "Example"
        }, 
        {
            "location": "/reference/footer/index.html#see-also", 
            "text": "add_page ,  header .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/get_string_width/index.html", 
            "text": "get_string_width\n\n\nself.get_string_width(s: str)\n\n\n\n\nDescription\n\n\nReturns the length of a string in user unit. A font must be selected.\n\n\nThe value is calculated with stretching and spacing.\n\n\nParameters\n\n\ns:\n\n\n\n\nThe string whose length is to be computed.\n\n\n\n\nSee also\n\n\nset_stretching\n.", 
            "title": "get_string_width"
        }, 
        {
            "location": "/reference/get_string_width/index.html#get_string_width", 
            "text": "self.get_string_width(s: str)", 
            "title": "get_string_width"
        }, 
        {
            "location": "/reference/get_string_width/index.html#description", 
            "text": "Returns the length of a string in user unit. A font must be selected.  The value is calculated with stretching and spacing.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/get_string_width/index.html#parameters", 
            "text": "s:   The string whose length is to be computed.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/get_string_width/index.html#see-also", 
            "text": "set_stretching .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/get_x/index.html", 
            "text": "get_x\n\n\nfpdf.get_x()\n\n\n\n\nDescription\n\n\nReturns the abscissa of the current position.\n\n\nSee also\n\n\nget_y\n, \nset_x\n, \nset_y\n, \nset_xy\n.", 
            "title": "get_x"
        }, 
        {
            "location": "/reference/get_x/index.html#get_x", 
            "text": "fpdf.get_x()", 
            "title": "get_x"
        }, 
        {
            "location": "/reference/get_x/index.html#description", 
            "text": "Returns the abscissa of the current position.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/get_x/index.html#see-also", 
            "text": "get_y ,  set_x ,  set_y ,  set_xy .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/get_y/index.html", 
            "text": "get_y\n\n\nfpdf.get_y()\n\n\n\n\nDescription\n\n\nReturns the ordinate of the current position.\n\n\nSee also\n\n\nget_x\n, \nset_x\n, \nset_y\n, \nset_xy\n.", 
            "title": "get_y"
        }, 
        {
            "location": "/reference/get_y/index.html#get_y", 
            "text": "fpdf.get_y()", 
            "title": "get_y"
        }, 
        {
            "location": "/reference/get_y/index.html#description", 
            "text": "Returns the ordinate of the current position.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/get_y/index.html#see-also", 
            "text": "get_x ,  set_x ,  set_y ,  set_xy .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/header/index.html", 
            "text": "header\n\n\nfdpf.header()\n\n\n\n\nDescription\n\n\nThis method is used to render the page header. It is automatically called by \nadd_page\n and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing.\n\n\nExample\n\n\nclass PDF(FPDF):\n    def header(self):\n        # Select Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Move to the right\n        self.cell(80)\n        # Framed title\n        self.cell(30, 10, 'Title', 1, 0, 'C')\n        # Line break\n        self.ln(20)\n\n\n\n\nSee also\n\n\nadd_page\n, \nfooter\n.", 
            "title": "header"
        }, 
        {
            "location": "/reference/header/index.html#header", 
            "text": "fdpf.header()", 
            "title": "header"
        }, 
        {
            "location": "/reference/header/index.html#description", 
            "text": "This method is used to render the page header. It is automatically called by  add_page  and should not be called directly by the application. The implementation in FPDF is empty, so you have to subclass it and override the method if you want a specific processing.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/header/index.html#example", 
            "text": "class PDF(FPDF):\n    def header(self):\n        # Select Arial bold 15\n        self.set_font('Arial', 'B', 15)\n        # Move to the right\n        self.cell(80)\n        # Framed title\n        self.cell(30, 10, 'Title', 1, 0, 'C')\n        # Line break\n        self.ln(20)", 
            "title": "Example"
        }, 
        {
            "location": "/reference/header/index.html#see-also", 
            "text": "add_page ,  footer .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/image/index.html", 
            "text": "image\n\n\nfpdf.image(name, x = None, y = None, w = 0, h = 0, type = '', link = '')\n\n\n\n\nDescription\n\n\nPuts an image. The size it will take on the page can be specified in different \nways:\n\n\n\n\nexplicit width and height (expressed in user units)\n\n\none explicit dimension, the other being calculated automatically in order to \n   keep the original proportions\n\n\nno explicit dimension, in which case the image is put at 72 dpi.\n\n\n\n\nSupported formats are JPEG, PNG and GIF.\n\n\nFor JPEGs, all flavors are allowed:\n\n\n\n\ngray scales\n\n\ntrue colors (24 bits)\n\n\nCMYK (32 bits)\n\n\n\n\nFor PNGs, these are allowed:\n\n\n\n\ngray scales of at most 8 bits (256 levels)\n\n\nindexed colors\n\n\ntrue colors (24 bits)\n\n\nalpha channel (\nversion 1.7 and up\n)\n\n\n\n\nbut this is not supported:\n\n\n\n\ninterlacing\n\n\n\n\nFor GIFs: in case of an animated GIF, only the first frame is used.\n\n\nIf a transparent color is defined, it is taken into account.\n\n\nThe format can be specified explicitly or inferred from the file extension.\n\n\nIt is possible to put a link on the image.\n\n\nRemark\n: if an image is used several times, only one copy is embedded in the\nfile.\n\n\nParameters\n\n\nname:\n\n\n\n\nPath or URL of the image.\n\n\n\n\nx:\n\n\n\n\nAbscissa of the upper-left corner. If not specified or equal to None, the \ncurrent abscissa is used (\nversion 1.7.1 and up\n).\n\n\n\n\ny:\n\n\n\n\nOrdinate of the upper-left corner. If not specified or equal to None, the \ncurrent ordinate is used; moreover, a page break is triggered first if \nnecessary (in case automatic page breaking is enabled) and, after the call,\nthe current ordinate is moved to the bottom of the image \n(\nversion 1.7.1 and up\n).\n\n\n\n\nw:\n\n\n\n\nWidth of the image in the page. If not specified or equal to zero, it is \nautomatically calculated.\n\n\n\n\nh:\n\n\n\n\nHeight of the image in the page. If not specified or equal to zero, it is \nautomatically calculated.\n\n\n\n\ntype:\n\n\n\n\nImage format. Possible values are (case insensitive): JPG, JPEG, PNG and GIF.\nIf not specified, the type is inferred from the file extension.\n\n\n\n\nlink:\n\n\n\n\nURL or identifier returned by \nadd_link\n.\n\n\n\n\nSee also\n\n\nadd_link\n, \nload_resource\n.", 
            "title": "image"
        }, 
        {
            "location": "/reference/image/index.html#image", 
            "text": "fpdf.image(name, x = None, y = None, w = 0, h = 0, type = '', link = '')", 
            "title": "image"
        }, 
        {
            "location": "/reference/image/index.html#description", 
            "text": "Puts an image. The size it will take on the page can be specified in different \nways:   explicit width and height (expressed in user units)  one explicit dimension, the other being calculated automatically in order to \n   keep the original proportions  no explicit dimension, in which case the image is put at 72 dpi.   Supported formats are JPEG, PNG and GIF.  For JPEGs, all flavors are allowed:   gray scales  true colors (24 bits)  CMYK (32 bits)   For PNGs, these are allowed:   gray scales of at most 8 bits (256 levels)  indexed colors  true colors (24 bits)  alpha channel ( version 1.7 and up )   but this is not supported:   interlacing   For GIFs: in case of an animated GIF, only the first frame is used.  If a transparent color is defined, it is taken into account.  The format can be specified explicitly or inferred from the file extension.  It is possible to put a link on the image.  Remark : if an image is used several times, only one copy is embedded in the\nfile.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/image/index.html#parameters", 
            "text": "name:   Path or URL of the image.   x:   Abscissa of the upper-left corner. If not specified or equal to None, the \ncurrent abscissa is used ( version 1.7.1 and up ).   y:   Ordinate of the upper-left corner. If not specified or equal to None, the \ncurrent ordinate is used; moreover, a page break is triggered first if \nnecessary (in case automatic page breaking is enabled) and, after the call,\nthe current ordinate is moved to the bottom of the image \n( version 1.7.1 and up ).   w:   Width of the image in the page. If not specified or equal to zero, it is \nautomatically calculated.   h:   Height of the image in the page. If not specified or equal to zero, it is \nautomatically calculated.   type:   Image format. Possible values are (case insensitive): JPG, JPEG, PNG and GIF.\nIf not specified, the type is inferred from the file extension.   link:   URL or identifier returned by  add_link .", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/image/index.html#see-also", 
            "text": "add_link ,  load_resource .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/load_resource/index.html", 
            "text": "load_resource\n\n\nfpdf.load_resource(reason: string, filename: string)\n\n\n\n\nDescription\n\n\nThis method is used to load external resources, such as images. It is \nautomatically called when resource added to document by \nimage\n. The \nimplementation in library sre try to load resource from local file system or \nfrom network if filename starts with \nhttp://\n or \nhttps://\n. This method can \nbe overrided within subclass if you want a specific processing. \n\n\nReturns file-like object.\n\n\nParameters\n\n\nreason:\n\n\n\n\nResource type: \nimage\n.\n\n\n\n\nfilename:\n\n\n\n\nfilename or URL.\n\n\n\n\nSee also\n\n\nimage\n.", 
            "title": "load_resource"
        }, 
        {
            "location": "/reference/load_resource/index.html#load_resource", 
            "text": "fpdf.load_resource(reason: string, filename: string)", 
            "title": "load_resource"
        }, 
        {
            "location": "/reference/load_resource/index.html#description", 
            "text": "This method is used to load external resources, such as images. It is \nautomatically called when resource added to document by  image . The \nimplementation in library sre try to load resource from local file system or \nfrom network if filename starts with  http://  or  https:// . This method can \nbe overrided within subclass if you want a specific processing.   Returns file-like object.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/load_resource/index.html#parameters", 
            "text": "reason:   Resource type:  image .   filename:   filename or URL.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/load_resource/index.html#see-also", 
            "text": "image .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/line/index.html", 
            "text": "line\n\n\nfpdf.line(x1, y1, x2, y2)\n\n\n\n\nDescription\n\n\nDraw a line between two points.\n\n\nParameters\n\n\nx1:\n\n\n\n\nAbscissa of first point\n\n\n\n\ny1:\n\n\n\n\nOrdinate of first point\n\n\n\n\nx2:\n\n\n\n\nAbscissa of second point\n\n\n\n\ny2:\n\n\n\n\nOrdinate of second point\n\n\n\n\nExample\n\n\n# Adds a line beginning at point (10,30) and ending at point (110,30)\npdf.line(10, 30, 110, 30)\n\n\n\n\nSee also\n\n\ndashed_line\n.", 
            "title": "line"
        }, 
        {
            "location": "/reference/line/index.html#line", 
            "text": "fpdf.line(x1, y1, x2, y2)", 
            "title": "line"
        }, 
        {
            "location": "/reference/line/index.html#description", 
            "text": "Draw a line between two points.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/line/index.html#parameters", 
            "text": "x1:   Abscissa of first point   y1:   Ordinate of first point   x2:   Abscissa of second point   y2:   Ordinate of second point", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/line/index.html#example", 
            "text": "# Adds a line beginning at point (10,30) and ending at point (110,30)\npdf.line(10, 30, 110, 30)", 
            "title": "Example"
        }, 
        {
            "location": "/reference/line/index.html#see-also", 
            "text": "dashed_line .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/link/index.html", 
            "text": "link\n\n\nfpdf.link(x: float, y: float, w: float, h: float, link)\n\n\n\n\nDescription\n\n\nPuts a link on a rectangular area of the page. Text or image links are generally put via \ncell\n, \nwrite\n or \nimage\n, but this method can be useful for instance to define a clickable area inside an image.\n\n\nParameters\n\n\nx:\n\n\n\n\nAbscissa of the upper-left corner of the rectangle.\n\n\n\n\ny:\n\n\n\n\nOrdinate of the upper-left corner of the rectangle.\n\n\n\n\nw:\n\n\n\n\nWidth of the rectangle.\n\n\n\n\nh:\n\n\n\n\nHeight of the rectangle.\n\n\n\n\nlink:\n\n\n\n\nURL or identifier returned by \nadd_link\n.\n\n\n\n\nSee also\n\n\nadd_link\n, \ncell\n, \nwrite\n, \nimage\n.", 
            "title": "link"
        }, 
        {
            "location": "/reference/link/index.html#link", 
            "text": "fpdf.link(x: float, y: float, w: float, h: float, link)", 
            "title": "link"
        }, 
        {
            "location": "/reference/link/index.html#description", 
            "text": "Puts a link on a rectangular area of the page. Text or image links are generally put via  cell ,  write  or  image , but this method can be useful for instance to define a clickable area inside an image.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/link/index.html#parameters", 
            "text": "x:   Abscissa of the upper-left corner of the rectangle.   y:   Ordinate of the upper-left corner of the rectangle.   w:   Width of the rectangle.   h:   Height of the rectangle.   link:   URL or identifier returned by  add_link .", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/link/index.html#see-also", 
            "text": "add_link ,  cell ,  write ,  image .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/ln/index.html", 
            "text": "ln\n\n\nfpdf.ln(h = '')\n\n\n\n\nDescription\n\n\nPerforms a line break. The current abscissa goes back to the left margin and the ordinate increases by the amount passed in the parameter.\n\n\nParameters\n\n\nh:\n\n\n\n\nThe height of the break.\n\n\nBy default, the value equals the height of the last printed cell.\n\n\n\n\nSee also\n\n\ncell\n.", 
            "title": "ln"
        }, 
        {
            "location": "/reference/ln/index.html#ln", 
            "text": "fpdf.ln(h = '')", 
            "title": "ln"
        }, 
        {
            "location": "/reference/ln/index.html#description", 
            "text": "Performs a line break. The current abscissa goes back to the left margin and the ordinate increases by the amount passed in the parameter.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/ln/index.html#parameters", 
            "text": "h:   The height of the break.  By default, the value equals the height of the last printed cell.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/ln/index.html#see-also", 
            "text": "cell .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/multi_cell/index.html", 
            "text": "multi_cell\n\n\nfpdf.multi_cell(w: float, h: float, txt: str, border = 0, \n                align: str = 'J', fill: bool = False)\n\n\n\n\nDescription\n\n\nThis method allows printing text with line breaks. They can be automatic (as \nsoon as the text reaches the right border of the cell) or explicit (via the \n\n\\n\n character). As many cells as necessary are output, one below the other.\nText can be aligned, centered or justified. The cell block can be framed and \nthe background painted.\n\n\nParameters\n\n\nw:\n\n\n\n\nWidth of cells. If 0, they extend up to the right margin of the page.\n\n\n\n\nh:\n\n\n\n\nHeight of cells.\n\n\n\n\ntxt:\n\n\n\n\nString to print.\n\n\n\n\nborder:\n\n\n\n\nIndicates if borders must be drawn around the cell block. The value can be \n  either a number:\n\n\n\n\n\n\n0: no border\n\n\n1: frame\n\n\n\n\n\n\nor a string containing some or all of the following characters (in any \n  order):\n\n\n\n\n\n\nL\n: left\n\n\nT\n: top\n\n\nR\n: right\n\n\nB\n: bottom\n\n\n\n\n\n\nDefault value: 0.\n\n\n\n\nalign:\n\n\n\n\nSets the text alignment. Possible values are:\n\n\n\n\n\n\nL\n: left alignment\n\n\nC\n: center\n\n\nR\n: right alignment\n\n\nJ\n: justification (default value)\n\n\n\n\n\n\n\n\nfill\n\n\n\n\nIndicates if the cell background must be painted (\nTrue\n) or transparent \n  (\nFalse\n). Default  value: False.\n\n\n\n\nSee also\n\n\nset_doc_option\n, \nset_font\n, \n\nset_draw_color\n, \nset_fill_color\n, \n\nset_text_color\n, \nset_line_width\n, \n\ncell\n, \nwrite\n, \n\nset_auto_page_break\n.", 
            "title": "multi_cell"
        }, 
        {
            "location": "/reference/multi_cell/index.html#multi_cell", 
            "text": "fpdf.multi_cell(w: float, h: float, txt: str, border = 0, \n                align: str = 'J', fill: bool = False)", 
            "title": "multi_cell"
        }, 
        {
            "location": "/reference/multi_cell/index.html#description", 
            "text": "This method allows printing text with line breaks. They can be automatic (as \nsoon as the text reaches the right border of the cell) or explicit (via the  \\n  character). As many cells as necessary are output, one below the other.\nText can be aligned, centered or justified. The cell block can be framed and \nthe background painted.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/multi_cell/index.html#parameters", 
            "text": "w:   Width of cells. If 0, they extend up to the right margin of the page.   h:   Height of cells.   txt:   String to print.   border:   Indicates if borders must be drawn around the cell block. The value can be \n  either a number:    0: no border  1: frame    or a string containing some or all of the following characters (in any \n  order):    L : left  T : top  R : right  B : bottom    Default value: 0.   align:   Sets the text alignment. Possible values are:    L : left alignment  C : center  R : right alignment  J : justification (default value)     fill   Indicates if the cell background must be painted ( True ) or transparent \n  ( False ). Default  value: False.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/multi_cell/index.html#see-also", 
            "text": "set_doc_option ,  set_font ,  set_draw_color ,  set_fill_color ,  set_text_color ,  set_line_width ,  cell ,  write ,  set_auto_page_break .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/open/index.html", 
            "text": "open\n\n\nfpdf.open()\n\n\n\n\nDescription\n\n\nThis method begins the generation of the PDF document. It is not necessary to call it explicitly because \nadd_page\n does it automatically.\n\n\nNote: no page is created by this method.\n\n\nSee also\n\n\nadd_page\n, \nclose\n.", 
            "title": "open"
        }, 
        {
            "location": "/reference/open/index.html#open", 
            "text": "fpdf.open()", 
            "title": "open"
        }, 
        {
            "location": "/reference/open/index.html#description", 
            "text": "This method begins the generation of the PDF document. It is not necessary to call it explicitly because  add_page  does it automatically.  Note: no page is created by this method.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/open/index.html#see-also", 
            "text": "add_page ,  close .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/output/index.html", 
            "text": "output\n\n\nfpdf.output(name = '', dest = '')\n\n\n\n\nDescription\n\n\nSend the document to some destination: standard output, a file or a byte string.\n\n\nThe method first calls \nclose\n if necessary to terminate the document.\n\n\nNOTICE:\n\nIn Python 2 strings were raw data but in Python 3 strings are now unicode by default. If you are using Python 3.x you have to use \npdf.output(dest='S').encode('latin-1')\n in order to get the output, if you don't do so the generated PDF will be invalid and depending on the viewer either not open at all or show up as some blank pages.\n\n\nParameters\n\n\nname:\n\n\n\n\nThe name of the file. Only used when writing to a file.\n\n\n\n\ndest:\n\n\n\n\nDestination to send the document. It can take one of the following values:\n\n\n\n\n\n\nI\n or \nD\n: write the document to \nsys.stdout\n. This is the default if no file name is given.\n\n\nF\n: save to a local file with the given name (may include a path). This is the default if a file name is given.\n\n\nS\n: return the document as a byte string.\n\n\n\n\n\n\n\n\nSee also\n\n\nclose\n.", 
            "title": "output"
        }, 
        {
            "location": "/reference/output/index.html#output", 
            "text": "fpdf.output(name = '', dest = '')", 
            "title": "output"
        }, 
        {
            "location": "/reference/output/index.html#description", 
            "text": "Send the document to some destination: standard output, a file or a byte string.  The method first calls  close  if necessary to terminate the document.  NOTICE: \nIn Python 2 strings were raw data but in Python 3 strings are now unicode by default. If you are using Python 3.x you have to use  pdf.output(dest='S').encode('latin-1')  in order to get the output, if you don't do so the generated PDF will be invalid and depending on the viewer either not open at all or show up as some blank pages.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/output/index.html#parameters", 
            "text": "name:   The name of the file. Only used when writing to a file.   dest:   Destination to send the document. It can take one of the following values:    I  or  D : write the document to  sys.stdout . This is the default if no file name is given.  F : save to a local file with the given name (may include a path). This is the default if a file name is given.  S : return the document as a byte string.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/output/index.html#see-also", 
            "text": "close .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/page_no/index.html", 
            "text": "page_no\n\n\nfpdf.page_no()\n\n\n\n\nDescription\n\n\nReturns the current page number.\n\n\nSee also\n\n\nalias_nb_pages\n.", 
            "title": "page_no"
        }, 
        {
            "location": "/reference/page_no/index.html#page_no", 
            "text": "fpdf.page_no()", 
            "title": "page_no"
        }, 
        {
            "location": "/reference/page_no/index.html#description", 
            "text": "Returns the current page number.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/page_no/index.html#see-also", 
            "text": "alias_nb_pages .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/rect/index.html", 
            "text": "rect\n\n\nfpdf.rect(x: float, y: float, w: float, h: float, style = '')\n\n\n\n\nDescription\n\n\nOutputs a rectangle. It can be drawn (border only), filled (with no border) or \nboth.\n\n\nParameters\n\n\nx:\n\n\n\n\nAbscissa of upper-left corner.\n\n\n\n\ny:\n\n\n\n\nOrdinate of upper-left corner.\n\n\n\n\nw:\n\n\n\n\nWidth.\n\n\n\n\nh:\n\n\n\n\nHeight.\n\n\n\n\nstyle:\n\n\n\n\nStyle of rendering. Possible values are:\n\n\n\n\n\n\nD\n or empty string: draw. This is the default value.\n\n\nF\n: fill\n\n\nDF\n or \nFD\n: draw and fill\n\n\n\n\n\n\n\n\nSee also\n\n\ncell\n, \nellipse\n.", 
            "title": "rect"
        }, 
        {
            "location": "/reference/rect/index.html#rect", 
            "text": "fpdf.rect(x: float, y: float, w: float, h: float, style = '')", 
            "title": "rect"
        }, 
        {
            "location": "/reference/rect/index.html#description", 
            "text": "Outputs a rectangle. It can be drawn (border only), filled (with no border) or \nboth.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/rect/index.html#parameters", 
            "text": "x:   Abscissa of upper-left corner.   y:   Ordinate of upper-left corner.   w:   Width.   h:   Height.   style:   Style of rendering. Possible values are:    D  or empty string: draw. This is the default value.  F : fill  DF  or  FD : draw and fill", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/rect/index.html#see-also", 
            "text": "cell ,  ellipse .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_author/index.html", 
            "text": "set_author\n\n\nfpdf.set_author(author: str)\n\n\n\n\nDescription\n\n\nDefines the author of the document.\n\n\nParameters\n\n\nauthor:\n\n\n\n\nThe name of the author.\n\n\n\n\nSee also\n\n\nset_creator\n, \nset_keywords\n, \nset_subject\n, \nset_title\n.", 
            "title": "set_author"
        }, 
        {
            "location": "/reference/set_author/index.html#set_author", 
            "text": "fpdf.set_author(author: str)", 
            "title": "set_author"
        }, 
        {
            "location": "/reference/set_author/index.html#description", 
            "text": "Defines the author of the document.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_author/index.html#parameters", 
            "text": "author:   The name of the author.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_author/index.html#see-also", 
            "text": "set_creator ,  set_keywords ,  set_subject ,  set_title .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_auto_page_break/index.html", 
            "text": "set_auto_page_break\n\n\nfpdf.set_auto_page_break(auto: bool, margin = 0.0)\n\n\n\n\nDescription\n\n\nEnables or disables the automatic page breaking mode. When enabling, the second parameter is the distance from the bottom of the page that defines the triggering limit. By default, the mode is on and the margin is 2 cm.\n\n\nParameters\n\n\nauto:\n\n\n\n\nBoolean indicating if mode should be on or off.\n\n\n\n\nmargin:\n\n\n\n\nDistance from the bottom of the page.\n\n\n\n\nSee also\n\n\ncell\n, \nmulti_cell\n, \naccept_page_break\n.", 
            "title": "set_auto_page_break"
        }, 
        {
            "location": "/reference/set_auto_page_break/index.html#set_auto_page_break", 
            "text": "fpdf.set_auto_page_break(auto: bool, margin = 0.0)", 
            "title": "set_auto_page_break"
        }, 
        {
            "location": "/reference/set_auto_page_break/index.html#description", 
            "text": "Enables or disables the automatic page breaking mode. When enabling, the second parameter is the distance from the bottom of the page that defines the triggering limit. By default, the mode is on and the margin is 2 cm.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_auto_page_break/index.html#parameters", 
            "text": "auto:   Boolean indicating if mode should be on or off.   margin:   Distance from the bottom of the page.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_auto_page_break/index.html#see-also", 
            "text": "cell ,  multi_cell ,  accept_page_break .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_compression/index.html", 
            "text": "set_compression\n\n\nfpdf.set_compression(compress: bool)\n\n\n\n\nDescription\n\n\nActivates or deactivates page compression. When activated, the internal representation of each page is compressed, which leads to a compression ratio of about 2 for the resulting document. \n\n\nCompression is on by default.\n\n\nParameters\n\n\ncompress:\n\n\n\n\nBoolean indicating if compression must be enabled.", 
            "title": "set_compression"
        }, 
        {
            "location": "/reference/set_compression/index.html#set_compression", 
            "text": "fpdf.set_compression(compress: bool)", 
            "title": "set_compression"
        }, 
        {
            "location": "/reference/set_compression/index.html#description", 
            "text": "Activates or deactivates page compression. When activated, the internal representation of each page is compressed, which leads to a compression ratio of about 2 for the resulting document.   Compression is on by default.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_compression/index.html#parameters", 
            "text": "compress:   Boolean indicating if compression must be enabled.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_creator/index.html", 
            "text": "set_creator\n\n\nfpdf.set_creator(creator: str)\n\n\n\n\nDescription\n\n\nDefines the creator of the document. This is typically the name of the application that generates the PDF.\n\n\nParameters\n\n\ncreator:\n\n\n\n\nThe name of the creator.\n\n\n\n\nSee also\n\n\nset_author\n, \nset_keywords\n, \nset_subject\n, \nset_title\n.", 
            "title": "set_creator"
        }, 
        {
            "location": "/reference/set_creator/index.html#set_creator", 
            "text": "fpdf.set_creator(creator: str)", 
            "title": "set_creator"
        }, 
        {
            "location": "/reference/set_creator/index.html#description", 
            "text": "Defines the creator of the document. This is typically the name of the application that generates the PDF.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_creator/index.html#parameters", 
            "text": "creator:   The name of the creator.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_creator/index.html#see-also", 
            "text": "set_author ,  set_keywords ,  set_subject ,  set_title .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_doc_option/index.html", 
            "text": "set_doc_option\n\n\nfpdf.set_doc_option(opt: str, value)\n\n\n\n\n\n\n\n\nset_doc_option\n\n\nDescription\n\n\nParameters\n\n\nOptions\n\n\ncore_fonts_encoding\n\n\n\n\n\n\nSee also\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDefines the document option.\n\n\nParameters\n\n\nopt:\n\n\n\n\nOption to set.\n\n\n\n\nvalue:\n\n\n\n\nValue.\n\n\n\n\nOptions\n\n\ncore_fonts_encoding\n\n\nSpecify encoding used for decoding unicode text for standard (non-unicode) \nfonts. Supported values are \nlatin-1\n and \nwindows-1252\n. Set this option \nbefore using any text writing.\n\n\nSee also\n\n\nset_font\n, \nwrite\n.", 
            "title": "set_doc_option"
        }, 
        {
            "location": "/reference/set_doc_option/index.html#set_doc_option", 
            "text": "fpdf.set_doc_option(opt: str, value)    set_doc_option  Description  Parameters  Options  core_fonts_encoding    See also", 
            "title": "set_doc_option"
        }, 
        {
            "location": "/reference/set_doc_option/index.html#description", 
            "text": "Defines the document option.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_doc_option/index.html#parameters", 
            "text": "opt:   Option to set.   value:   Value.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_doc_option/index.html#options", 
            "text": "", 
            "title": "Options"
        }, 
        {
            "location": "/reference/set_doc_option/index.html#core_fonts_encoding", 
            "text": "Specify encoding used for decoding unicode text for standard (non-unicode) \nfonts. Supported values are  latin-1  and  windows-1252 . Set this option \nbefore using any text writing.", 
            "title": "core_fonts_encoding"
        }, 
        {
            "location": "/reference/set_doc_option/index.html#see-also", 
            "text": "set_font ,  write .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_display_mode/index.html", 
            "text": "set_display_mode\n\n\nfpdf.set_display_mode(zoom, layout: str)\n\n\n\n\nDescription\n\n\nDefines the way the document is to be displayed by the viewer. The zoom level can be set: pages can be displayed entirely on screen, occupy the full width of the window, use the real size, be scaled by a specific zooming factor or use the viewer default (configured in the Preferences menu of Adobe Reader). The page layout can be specified too: single page at a time, continuous display, two columns or viewer default.\n\n\nIf this method is not called, the zoom mode is set to \nfullwidth\n and the layout is set to \ncontinuous\n by default.\n\n\nParameters\n\n\nzoom:\n\n\n\n\nThe zoom to use. It can be one of the following string values:\n\n\n\n\n\n\nfullpage\n: displays the entire page on the screen\n\n\nfullwidth\n: uses the maximum width of the window\n\n\nreal\n: uses the real size (equivalent to 100% zoom)\n\n\ndefault\n: uses the viewer default mode\n\n\n\n\n\n\nor a number indicating the zooming factor to use, as a percentage.\n\n\n\n\nlayout:\n\n\n\n\nThe page layout. Possible values are:\n\n\n\n\n\n\nsingle\n: displays one page at a time\n\n\ncontinuous\n: displays pages continuously\n\n\ntwo\n: displays two pages in two columns\n\n\ndefault\n: uses the viewer default mode\n\n\n\n\n\n\nThe default value is \ncontinuous\n.", 
            "title": "set_display_mode"
        }, 
        {
            "location": "/reference/set_display_mode/index.html#set_display_mode", 
            "text": "fpdf.set_display_mode(zoom, layout: str)", 
            "title": "set_display_mode"
        }, 
        {
            "location": "/reference/set_display_mode/index.html#description", 
            "text": "Defines the way the document is to be displayed by the viewer. The zoom level can be set: pages can be displayed entirely on screen, occupy the full width of the window, use the real size, be scaled by a specific zooming factor or use the viewer default (configured in the Preferences menu of Adobe Reader). The page layout can be specified too: single page at a time, continuous display, two columns or viewer default.  If this method is not called, the zoom mode is set to  fullwidth  and the layout is set to  continuous  by default.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_display_mode/index.html#parameters", 
            "text": "zoom:   The zoom to use. It can be one of the following string values:    fullpage : displays the entire page on the screen  fullwidth : uses the maximum width of the window  real : uses the real size (equivalent to 100% zoom)  default : uses the viewer default mode    or a number indicating the zooming factor to use, as a percentage.   layout:   The page layout. Possible values are:    single : displays one page at a time  continuous : displays pages continuously  two : displays two pages in two columns  default : uses the viewer default mode    The default value is  continuous .", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_draw_color/index.html", 
            "text": "set_draw_color\n\n\nfpdf.set_draw_color(r: int, g: int = -1, b: int = -1)\n\n\n\n\nDescription\n\n\nDefines the color used for all drawing operations (lines, rectangles and cell borders). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.\n\n\nParameters\n\n\nr:\n\n\n\n\nIf \ng\n and \nb\n are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255.\n\n\n\n\ng:\n\n\n\n\nGreen component (between 0 and 255).\n\n\n\n\nb:\n\n\n\n\nBlue component (between 0 and 255).\n\n\n\n\nSee also\n\n\nset_fill_color\n, \nset_text_color\n, \nline\n, \nrect\n, \ncell\n, \nmulti_cell\n.", 
            "title": "set_draw_color"
        }, 
        {
            "location": "/reference/set_draw_color/index.html#set_draw_color", 
            "text": "fpdf.set_draw_color(r: int, g: int = -1, b: int = -1)", 
            "title": "set_draw_color"
        }, 
        {
            "location": "/reference/set_draw_color/index.html#description", 
            "text": "Defines the color used for all drawing operations (lines, rectangles and cell borders). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_draw_color/index.html#parameters", 
            "text": "r:   If  g  and  b  are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255.   g:   Green component (between 0 and 255).   b:   Blue component (between 0 and 255).", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_draw_color/index.html#see-also", 
            "text": "set_fill_color ,  set_text_color ,  line ,  rect ,  cell ,  multi_cell .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_fill_color/index.html", 
            "text": "set_fill_color\n\n\nfpdf.set_fill_color(r: int, g: int = -1, b: int = -1)\n\n\n\n\nDescription\n\n\nDefines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.\n\n\nParameters\n\n\nr:\n\n\n\n\nIf \ng\n and \nb\n are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255.\n\n\n\n\ng:\n\n\n\n\nGreen component (between 0 and 255).\n\n\n\n\nb:\n\n\n\n\nBlue component (between 0 and 255).\n\n\n\n\nSee also\n\n\nset_draw_color\n, \nset_text_color\n, \nrect\n, \ncell\n, \nmulti_cell\n.", 
            "title": "set_fill_color"
        }, 
        {
            "location": "/reference/set_fill_color/index.html#set_fill_color", 
            "text": "fpdf.set_fill_color(r: int, g: int = -1, b: int = -1)", 
            "title": "set_fill_color"
        }, 
        {
            "location": "/reference/set_fill_color/index.html#description", 
            "text": "Defines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_fill_color/index.html#parameters", 
            "text": "r:   If  g  and  b  are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255.   g:   Green component (between 0 and 255).   b:   Blue component (between 0 and 255).", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_fill_color/index.html#see-also", 
            "text": "set_draw_color ,  set_text_color ,  rect ,  cell ,  multi_cell .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_font/index.html", 
            "text": "set_font\n\n\nfpdf.set_font(family, style = '', size = 0)\n\n\n\n\nDescription\n\n\nSets the font used to print character strings. It is mandatory to call this \nmethod at least once before printing text or the resulting document would not \nbe valid.\n\n\nThe font can be either a standard one or a font added via the \n\nadd_font\n method. \n\n\nDefault encoding is not specified, but all text writing methods accept only\nunicode for external fonts and one byte encoding for standard.\n\n\nStandard fonts use \nLatin-1\n encoding by default, but Windows \nencoding \ncp1252\n (Western Europe) can be used with \n\nset_doc_option\n (\"core_fonts_encoding\", encoding).\n\n\nThe method can be called before the first page is created and the font is \nretained from page to page.\n\n\nIf you just wish to change the current font size, it is simpler to call \n\nset_font_size\n.\n\n\nNote\n: the font metric files must be accessible. They are searched \nsuccessively in:\n\n\n\n\nThe directory defined by the FPDF_FONTPATH constant (if this constant is \n   defined)\n\n\nThe font directory located in the directory containing fpdf.py (if it \n   exists)\n\n\n\n\nThe directories accessible through include()\nExample defining FPDF_FONTPATH (note the mandatory trailing slash):\ndefine(\"FPDF_FONTPATH\",\"/home/www/font/\");\nrequire(\"fpdf.php\");\nIf the file corresponding to the requested font is not found, the error \"Could \nnot include font metric file\" is issued.\n\n\nParameters\n\n\nfamily:\n\n\n\n\nFont family. It can be either a name defined by \nadd_font\n or \n  one of the standard families (case insensitive):\n\n\n\n\n\n\nCourier (fixed-width)\n\n\nHelvetica or Arial (synonymous; sans serif)\n\n\nTimes (serif)\n\n\nSymbol (symbolic)\n\n\nZapfDingbats (symbolic)\n\n\n\n\n\n\nIt is also possible to pass an empty string. In that case, the current \n  family is retained.\n\n\n\n\nstyle:\n\n\n\n\nFont style. Possible values are (case insensitive):\n\n\n\n\n\n\nempty string: regular\n\n\nB: bold\n\n\nI: italic\n\n\nU: underline\n\n\n\n\n\n\nor any combination. The default value is regular. Bold and italic styles do \n  not apply to Symbol and ZapfDingbats.\n\n\n\n\nsize:\n\n\n\n\nFont size in points.\nThe default value is the current size. If no size has been specified since \n  the beginning of the document, the value taken is 12.\n\n\n\n\nExample\n\n\n# Times regular 12\npdf.set_font('Times')\n# Arial bold 14\npdf.set_font('Arial', 'B', 14)\n# Removes bold\npdf.set_font('')\n# Times bold, italic and underlined 14\npdf.set_font('Times', 'BIU')\n\n\n\n\nSee also\n\n\nadd_font\n, \nset_doc_option\n, \n\nset_font_size\n, \ncell\n, \n\nmulti_cell\n, \nwrite\n, \n\nset_stretching\n.", 
            "title": "set_font"
        }, 
        {
            "location": "/reference/set_font/index.html#set_font", 
            "text": "fpdf.set_font(family, style = '', size = 0)", 
            "title": "set_font"
        }, 
        {
            "location": "/reference/set_font/index.html#description", 
            "text": "Sets the font used to print character strings. It is mandatory to call this \nmethod at least once before printing text or the resulting document would not \nbe valid.  The font can be either a standard one or a font added via the  add_font  method.   Default encoding is not specified, but all text writing methods accept only\nunicode for external fonts and one byte encoding for standard.  Standard fonts use  Latin-1  encoding by default, but Windows \nencoding  cp1252  (Western Europe) can be used with  set_doc_option  (\"core_fonts_encoding\", encoding).  The method can be called before the first page is created and the font is \nretained from page to page.  If you just wish to change the current font size, it is simpler to call  set_font_size .  Note : the font metric files must be accessible. They are searched \nsuccessively in:   The directory defined by the FPDF_FONTPATH constant (if this constant is \n   defined)  The font directory located in the directory containing fpdf.py (if it \n   exists)   The directories accessible through include()\nExample defining FPDF_FONTPATH (note the mandatory trailing slash):\ndefine(\"FPDF_FONTPATH\",\"/home/www/font/\");\nrequire(\"fpdf.php\");\nIf the file corresponding to the requested font is not found, the error \"Could \nnot include font metric file\" is issued.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_font/index.html#parameters", 
            "text": "family:   Font family. It can be either a name defined by  add_font  or \n  one of the standard families (case insensitive):    Courier (fixed-width)  Helvetica or Arial (synonymous; sans serif)  Times (serif)  Symbol (symbolic)  ZapfDingbats (symbolic)    It is also possible to pass an empty string. In that case, the current \n  family is retained.   style:   Font style. Possible values are (case insensitive):    empty string: regular  B: bold  I: italic  U: underline    or any combination. The default value is regular. Bold and italic styles do \n  not apply to Symbol and ZapfDingbats.   size:   Font size in points.\nThe default value is the current size. If no size has been specified since \n  the beginning of the document, the value taken is 12.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_font/index.html#example", 
            "text": "# Times regular 12\npdf.set_font('Times')\n# Arial bold 14\npdf.set_font('Arial', 'B', 14)\n# Removes bold\npdf.set_font('')\n# Times bold, italic and underlined 14\npdf.set_font('Times', 'BIU')", 
            "title": "Example"
        }, 
        {
            "location": "/reference/set_font/index.html#see-also", 
            "text": "add_font ,  set_doc_option ,  set_font_size ,  cell ,  multi_cell ,  write ,  set_stretching .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_font_size/index.html", 
            "text": "set_font_size\n\n\nfpdf.set_font_size(float size)\n\n\n\n\nDescription\n\n\nDefines the size of the current font.\n\n\nParameters\n\n\nsize:\n\n\n\n\nThe size (in points).\n\n\n\n\nSee also\n\n\nset_font\n.", 
            "title": "set_font_size"
        }, 
        {
            "location": "/reference/set_font_size/index.html#set_font_size", 
            "text": "fpdf.set_font_size(float size)", 
            "title": "set_font_size"
        }, 
        {
            "location": "/reference/set_font_size/index.html#description", 
            "text": "Defines the size of the current font.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_font_size/index.html#parameters", 
            "text": "size:   The size (in points).", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_font_size/index.html#see-also", 
            "text": "set_font .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_keywords/index.html", 
            "text": "set_keywords\n\n\nfpdf.set_keywords(keywords: str)\n\n\n\n\nDescription\n\n\nAssociates keywords with the document, generally in the form 'keyword1 keyword2 ...'.\n\n\nParameters\n\n\nkeywords:\n\n\n\n\nThe list of keywords.\n\n\n\n\nSee also\n\n\nset_author\n, \nset_creator\n, \nset_subject\n, \nset_title\n.", 
            "title": "set_keywords"
        }, 
        {
            "location": "/reference/set_keywords/index.html#set_keywords", 
            "text": "fpdf.set_keywords(keywords: str)", 
            "title": "set_keywords"
        }, 
        {
            "location": "/reference/set_keywords/index.html#description", 
            "text": "Associates keywords with the document, generally in the form 'keyword1 keyword2 ...'.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_keywords/index.html#parameters", 
            "text": "keywords:   The list of keywords.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_keywords/index.html#see-also", 
            "text": "set_author ,  set_creator ,  set_subject ,  set_title .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_left_margin/index.html", 
            "text": "set_left_margin\n\n\nfpdf.set_left_margin(margin: float)\n\n\n\n\nDescription\n\n\nDefines the left margin. The method can be called before creating the first page. \nIf the current abscissa goes out of the page, it is brought back to the margin.\n\n\nParameters\n\n\nmargin:\n\n\n\n\nThe margin.\n\n\n\n\nSee also\n\n\nset_top_margin\n, \nset_right_margin\n, \nset_auto_page_break\n, \nset_margins\n.", 
            "title": "set_left_margin"
        }, 
        {
            "location": "/reference/set_left_margin/index.html#set_left_margin", 
            "text": "fpdf.set_left_margin(margin: float)", 
            "title": "set_left_margin"
        }, 
        {
            "location": "/reference/set_left_margin/index.html#description", 
            "text": "Defines the left margin. The method can be called before creating the first page. \nIf the current abscissa goes out of the page, it is brought back to the margin.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_left_margin/index.html#parameters", 
            "text": "margin:   The margin.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_left_margin/index.html#see-also", 
            "text": "set_top_margin ,  set_right_margin ,  set_auto_page_break ,  set_margins .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_line_width/index.html", 
            "text": "set_line_width\n\n\nfpdf.set_line_width(width: float)\n\n\n\n\nDescription\n\n\nDefines the line width. By default, the value equals 0.2 mm. The method can be called before the first page is created and the value is retained from page to page.\n\n\nParameters\n\n\nwidth:\n\n\n\n\nThe width.\n\n\n\n\nSee also\n\n\nline\n, \nrect\n, \ncell\n, \nmulti_cell\n.", 
            "title": "set_line_width"
        }, 
        {
            "location": "/reference/set_line_width/index.html#set_line_width", 
            "text": "fpdf.set_line_width(width: float)", 
            "title": "set_line_width"
        }, 
        {
            "location": "/reference/set_line_width/index.html#description", 
            "text": "Defines the line width. By default, the value equals 0.2 mm. The method can be called before the first page is created and the value is retained from page to page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_line_width/index.html#parameters", 
            "text": "width:   The width.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_line_width/index.html#see-also", 
            "text": "line ,  rect ,  cell ,  multi_cell .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_link/index.html", 
            "text": "set_link\n\n\nfpdf.set_link(link, y = 0.0, page = -1)\n\n\n\n\nDescription\n\n\nDefines the page and position a link points to.\n\n\nParameters\n\n\nlink:\n\n\n\n\nThe link identifier returned by \nadd_link\n.\n\n\n\n\ny:\n\n\n\n\nOrdinate of target position; -1 indicates the current position. The default value is 0 (top of page).\n\n\n\n\npage:\n\n\n\n\nNumber of target page; -1 indicates the current page, which is the default value.\n\n\n\n\nSee also\n\n\nadd_link\n.", 
            "title": "set_link"
        }, 
        {
            "location": "/reference/set_link/index.html#set_link", 
            "text": "fpdf.set_link(link, y = 0.0, page = -1)", 
            "title": "set_link"
        }, 
        {
            "location": "/reference/set_link/index.html#description", 
            "text": "Defines the page and position a link points to.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_link/index.html#parameters", 
            "text": "link:   The link identifier returned by  add_link .   y:   Ordinate of target position; -1 indicates the current position. The default value is 0 (top of page).   page:   Number of target page; -1 indicates the current page, which is the default value.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_link/index.html#see-also", 
            "text": "add_link .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_margins/index.html", 
            "text": "set_margins\n\n\nfpdf.set_margins(left: float, top: float, right: float = -1)\n\n\n\n\nDescription\n\n\nDefines the left, top and right margins. By default, they equal 1 cm. Call this method to change them.\n\n\nParameters\n\n\nleft:\n\n\n\n\nLeft margin.\n\n\n\n\ntop:\n\n\n\n\nTop margin.\n\n\n\n\nright:\n\n\n\n\nRight margin. Default value is the left one.\n\n\n\n\nSee also\n\n\nset_top_margin\n, \nset_left_margin\n, \nset_right_margin\n, \nset_auto_page_break\n.", 
            "title": "set_margins"
        }, 
        {
            "location": "/reference/set_margins/index.html#set_margins", 
            "text": "fpdf.set_margins(left: float, top: float, right: float = -1)", 
            "title": "set_margins"
        }, 
        {
            "location": "/reference/set_margins/index.html#description", 
            "text": "Defines the left, top and right margins. By default, they equal 1 cm. Call this method to change them.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_margins/index.html#parameters", 
            "text": "left:   Left margin.   top:   Top margin.   right:   Right margin. Default value is the left one.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_margins/index.html#see-also", 
            "text": "set_top_margin ,  set_left_margin ,  set_right_margin ,  set_auto_page_break .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_right_margin/index.html", 
            "text": "set_right_margin\n\n\nfpdf.set_right_margin(margin: float)\n\n\n\n\nDescription\n\n\nDefines the right margin. The method can be called before creating the first page.\n\n\nParameters\n\n\nmargin:\n\n\n\n\nThe margin.\n\n\n\n\nSee also\n\n\nset_top_margin\n, \nset_left_margin\n, \nset_auto_page_break\n, \nset_margins\n.", 
            "title": "set_right_margin"
        }, 
        {
            "location": "/reference/set_right_margin/index.html#set_right_margin", 
            "text": "fpdf.set_right_margin(margin: float)", 
            "title": "set_right_margin"
        }, 
        {
            "location": "/reference/set_right_margin/index.html#description", 
            "text": "Defines the right margin. The method can be called before creating the first page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_right_margin/index.html#parameters", 
            "text": "margin:   The margin.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_right_margin/index.html#see-also", 
            "text": "set_top_margin ,  set_left_margin ,  set_auto_page_break ,  set_margins .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_stretching/index.html", 
            "text": "set_stretching\n\n\nfpdf.set_stretching(stretching: float)\n\n\n\n\nDescription\n\n\nSets horizontal font stretching. By default, if this method is not called, no stretching is set (equivalent to a value of 100).\n\n\nVersion\n\n\nSince 1.7.3\n\n\nParameters\n\n\nstretching:\n\n\n\n\nDefine horizontal stretching (scaling) in percents.\n\n\n\n\nExample\n\n\n# Arial regular 14\npdf.set_font('Arial')\n# Set stretching to 50%, narrow text\npdf.set_stretching(50.0)\n\n\n\n\nSee also\n\n\nset_font\n, \nset_font_size\n, \nget_string_width\n.", 
            "title": "set_stretching"
        }, 
        {
            "location": "/reference/set_stretching/index.html#set_stretching", 
            "text": "fpdf.set_stretching(stretching: float)", 
            "title": "set_stretching"
        }, 
        {
            "location": "/reference/set_stretching/index.html#description", 
            "text": "Sets horizontal font stretching. By default, if this method is not called, no stretching is set (equivalent to a value of 100).", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_stretching/index.html#version", 
            "text": "Since 1.7.3", 
            "title": "Version"
        }, 
        {
            "location": "/reference/set_stretching/index.html#parameters", 
            "text": "stretching:   Define horizontal stretching (scaling) in percents.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_stretching/index.html#example", 
            "text": "# Arial regular 14\npdf.set_font('Arial')\n# Set stretching to 50%, narrow text\npdf.set_stretching(50.0)", 
            "title": "Example"
        }, 
        {
            "location": "/reference/set_stretching/index.html#see-also", 
            "text": "set_font ,  set_font_size ,  get_string_width .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_subject/index.html", 
            "text": "set_subject\n\n\nfpdf.set_subject(subject: str)\n\n\n\n\nDescription\n\n\nDefines the subject of the document.\n\n\nParameters\n\n\nsubject:\n\n\n\n\nThe subject.\n\n\n\n\nSee also\n\n\nset_author\n, \nset_creator\n, \nset_keywords\n, \nset_title\n.", 
            "title": "set_subject"
        }, 
        {
            "location": "/reference/set_subject/index.html#set_subject", 
            "text": "fpdf.set_subject(subject: str)", 
            "title": "set_subject"
        }, 
        {
            "location": "/reference/set_subject/index.html#description", 
            "text": "Defines the subject of the document.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_subject/index.html#parameters", 
            "text": "subject:   The subject.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_subject/index.html#see-also", 
            "text": "set_author ,  set_creator ,  set_keywords ,  set_title .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_text_color/index.html", 
            "text": "set_text_color\n\n\nfpdf.set_text_color(r: int, g: int = -1, b: int = -1)\n\n\n\n\nDescription\n\n\nDefines the color used for text. It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.\n\n\nParameters\n\n\nr:\n\n\n\n\nIf \ng\n and \nb\n are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255.\n\n\n\n\ng:\n\n\n\n\nGreen component (between 0 and 255).\n\n\n\n\nb:\n\n\n\n\nBlue component (between 0 and 255).\n\n\n\n\nSee also\n\n\nset_draw_color\n, \nset_fill_color\n, \ntext\n, \ncell\n, \nmulti_cell\n.", 
            "title": "set_text_color"
        }, 
        {
            "location": "/reference/set_text_color/index.html#set_text_color", 
            "text": "fpdf.set_text_color(r: int, g: int = -1, b: int = -1)", 
            "title": "set_text_color"
        }, 
        {
            "location": "/reference/set_text_color/index.html#description", 
            "text": "Defines the color used for text. It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_text_color/index.html#parameters", 
            "text": "r:   If  g  and  b  are given, this indicates the red component; if not, this indicates the gray level. The value is between 0 and 255.   g:   Green component (between 0 and 255).   b:   Blue component (between 0 and 255).", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_text_color/index.html#see-also", 
            "text": "set_draw_color ,  set_fill_color ,  text ,  cell ,  multi_cell .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_title/index.html", 
            "text": "set_title\n\n\nfpdf.set_title(title: str)\n\n\n\n\nDescription\n\n\nDefines the title of the document.\n\n\nParameters\n\n\ntitle:\n\n\n\n\nThe title.\n\n\n\n\nSee also\n\n\nset_author\n, \nset_creator\n, \nset_keywords\n, \nset_subject\n.", 
            "title": "set_title"
        }, 
        {
            "location": "/reference/set_title/index.html#set_title", 
            "text": "fpdf.set_title(title: str)", 
            "title": "set_title"
        }, 
        {
            "location": "/reference/set_title/index.html#description", 
            "text": "Defines the title of the document.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_title/index.html#parameters", 
            "text": "title:   The title.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_title/index.html#see-also", 
            "text": "set_author ,  set_creator ,  set_keywords ,  set_subject .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_top_margin/index.html", 
            "text": "set_top_margin\n\n\nfpdf.set_top_margin(margin: float)\n\n\n\n\nDescription\n\n\nDefines the top margin. The method can be called before creating the first page.\n\n\nParameters\n\n\nmargin:\n\n\n\n\nThe margin.\n\n\n\n\nSee also\n\n\nset_left_margin\n, \nset_right_margin\n, \nset_auto_page_break\n, \nset_margins\n.", 
            "title": "set_top_margin"
        }, 
        {
            "location": "/reference/set_top_margin/index.html#set_top_margin", 
            "text": "fpdf.set_top_margin(margin: float)", 
            "title": "set_top_margin"
        }, 
        {
            "location": "/reference/set_top_margin/index.html#description", 
            "text": "Defines the top margin. The method can be called before creating the first page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_top_margin/index.html#parameters", 
            "text": "margin:   The margin.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_top_margin/index.html#see-also", 
            "text": "set_left_margin ,  set_right_margin ,  set_auto_page_break ,  set_margins .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_x/index.html", 
            "text": "set_x\n\n\nfpdf.set_x(x: float)\n\n\n\n\nDescription\n\n\nDefines the abscissa of the current position. If the passed value is negative, it is relative to the right of the page.\n\n\nParameters\n\n\nx:\n\n\n\n\nThe value of the abscissa.\n\n\n\n\nSee also\n\n\nget_x\n, \nget_y\n, \nset_y\n, \nset_xy\n.", 
            "title": "set_x"
        }, 
        {
            "location": "/reference/set_x/index.html#set_x", 
            "text": "fpdf.set_x(x: float)", 
            "title": "set_x"
        }, 
        {
            "location": "/reference/set_x/index.html#description", 
            "text": "Defines the abscissa of the current position. If the passed value is negative, it is relative to the right of the page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_x/index.html#parameters", 
            "text": "x:   The value of the abscissa.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_x/index.html#see-also", 
            "text": "get_x ,  get_y ,  set_y ,  set_xy .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_xy/index.html", 
            "text": "set_xy\n\n\nfpdf.set_xy(x: float, y: float)\n\n\n\n\nDescription\n\n\nDefines the abscissa and ordinate of the current position. If the passed values are negative, they are relative respectively to the right and bottom of the page.\n\n\nParameters\n\n\nx:\n\n\n\n\nThe value of the abscissa.\n\n\n\n\ny:\n\n\n\n\nThe value of the ordinate.\n\n\n\n\nSee also\n\n\nget_x\n, \nget_y\n, \nset_x\n, \nset_y\n.", 
            "title": "set_xy"
        }, 
        {
            "location": "/reference/set_xy/index.html#set_xy", 
            "text": "fpdf.set_xy(x: float, y: float)", 
            "title": "set_xy"
        }, 
        {
            "location": "/reference/set_xy/index.html#description", 
            "text": "Defines the abscissa and ordinate of the current position. If the passed values are negative, they are relative respectively to the right and bottom of the page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_xy/index.html#parameters", 
            "text": "x:   The value of the abscissa.   y:   The value of the ordinate.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_xy/index.html#see-also", 
            "text": "get_x ,  get_y ,  set_x ,  set_y .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/set_y/index.html", 
            "text": "set_y\n\n\nfpdf.set_y(y: float)\n\n\n\n\nDescription\n\n\nMoves the current abscissa back to the left margin and sets the ordinate. If the passed value is negative, it is relative to the bottom of the page.\n\n\nParameters\n\n\ny:\n\n\n\n\nThe value of the ordinate.\n\n\n\n\nSee also\n\n\nget_x\n, \nget_y\n, \nset_x\n, \nset_xy\n.", 
            "title": "set_y"
        }, 
        {
            "location": "/reference/set_y/index.html#set_y", 
            "text": "fpdf.set_y(y: float)", 
            "title": "set_y"
        }, 
        {
            "location": "/reference/set_y/index.html#description", 
            "text": "Moves the current abscissa back to the left margin and sets the ordinate. If the passed value is negative, it is relative to the bottom of the page.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/set_y/index.html#parameters", 
            "text": "y:   The value of the ordinate.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/set_y/index.html#see-also", 
            "text": "get_x ,  get_y ,  set_x ,  set_xy .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/text/index.html", 
            "text": "text\n\n\nfpdf.text(x: float, y: float, txt: str)\n\n\n\n\nDescription\n\n\nPrints a character string. The origin is on the left of the first character, on \nthe baseline. This method allows placing a string precisely on the page, but it \nis usually easier to use \ncell\n, \nmulti_cell\n or \n\nwrite\n, which are the standard methods to print text.\n\n\nParameters\n\n\nx:\n\n\n\n\nAbscissa of the origin.\n\n\n\n\ny:\n\n\n\n\nOrdinate of the origin.\n\n\n\n\ntxt:\n\n\n\n\nString to print.\n\n\n\n\nSee also\n\n\nset_doc_option\n, \nset_font\n, \n\nset_text_color\n, \ncell\n, \n\nmulti_cell\n, \nwrite\n.", 
            "title": "text"
        }, 
        {
            "location": "/reference/text/index.html#text", 
            "text": "fpdf.text(x: float, y: float, txt: str)", 
            "title": "text"
        }, 
        {
            "location": "/reference/text/index.html#description", 
            "text": "Prints a character string. The origin is on the left of the first character, on \nthe baseline. This method allows placing a string precisely on the page, but it \nis usually easier to use  cell ,  multi_cell  or  write , which are the standard methods to print text.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/text/index.html#parameters", 
            "text": "x:   Abscissa of the origin.   y:   Ordinate of the origin.   txt:   String to print.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/text/index.html#see-also", 
            "text": "set_doc_option ,  set_font ,  set_text_color ,  cell ,  multi_cell ,  write .", 
            "title": "See also"
        }, 
        {
            "location": "/reference/write/index.html", 
            "text": "write\n\n\nwrite(h: float, txt: str, link)\n\n\n\n\nDescription\n\n\nThis method prints text from the current position. When the right margin is \nreached (or the \\n character is met), a line break occurs and text continues \nfrom the left margin. Upon method exit, the current position is left just at \nthe end of the text.\n\n\nIt is possible to put a link on the text.\n\n\nParameters\n\n\nh:\n\n\n\n\nLine height.\n\n\n\n\ntxt:\n\n\n\n\nString to print.\n\n\n\n\nlink:\n\n\n\n\nURL or identifier returned by \nadd_link\n.\n\n\n\n\nExample\n\n\n# Begin with regular font\npdf.set_font('Arial', '', 14)\npdf.write(5, 'Visit ')\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.write(5, 'www.fpdf.org', 'http://www.fpdf.org')\n\n\n\n\nSee also\n\n\nset_doc_option\n, \nset_font\n, \n\nset_text_color\n, \nadd_link\n, \n\nmulti_cell\n, \nset_auto_page_break\n, \n\nwrite_html", 
            "title": "write"
        }, 
        {
            "location": "/reference/write/index.html#write", 
            "text": "write(h: float, txt: str, link)", 
            "title": "write"
        }, 
        {
            "location": "/reference/write/index.html#description", 
            "text": "This method prints text from the current position. When the right margin is \nreached (or the \\n character is met), a line break occurs and text continues \nfrom the left margin. Upon method exit, the current position is left just at \nthe end of the text.  It is possible to put a link on the text.", 
            "title": "Description"
        }, 
        {
            "location": "/reference/write/index.html#parameters", 
            "text": "h:   Line height.   txt:   String to print.   link:   URL or identifier returned by  add_link .", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/write/index.html#example", 
            "text": "# Begin with regular font\npdf.set_font('Arial', '', 14)\npdf.write(5, 'Visit ')\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.write(5, 'www.fpdf.org', 'http://www.fpdf.org')", 
            "title": "Example"
        }, 
        {
            "location": "/reference/write/index.html#see-also", 
            "text": "set_doc_option ,  set_font ,  set_text_color ,  add_link ,  multi_cell ,  set_auto_page_break ,  write_html", 
            "title": "See also"
        }, 
        {
            "location": "/reference/write_html/index.html", 
            "text": "write_html\n\n\nHTMLMixin.write_html(text: str, image_map = None)\n\n\n\n\nDescription\n\n\nPyFPDF supports basic HTML, mainly intended to write reports from web frameworks.\n\n\nIt understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below).\n\n\nHTMLMixin could be used along with FPDF class to implement this functionality (see the example).\n\n\nSample: \nhtml.pdf\n\n\nParameters\n\n\ntest:\n\n\n\n\nstring with HTML markup\n\n\n\n\nimage_map:\n\n\n\n\ndictionary with image map\n\n\n\n\nDetails\n\n\nHTML tags and attributes supported:\n\n\n\n\nH1 to H8: headings (align attribute)\n\n\nP: paragraphs (align attributes)\n\n\nB, I, U: bold, italic, underline\n\n\nFONT: (face, size, color attributes)\n\n\nCENTER for aligning\n\n\nA: links (href attribute)\n\n\nIMG: images (src, width, height attributes)\n\n\nOL, UL, LI: ordered, unordered and list items (can be nested)\n\n\nTABLE: (border, width attributes)\n\n\nTHEAD: header (opens each page)\n\n\nTFOOT: footer (closes each page)\n\n\nTBODY: actual rows\n\n\nTR: rows (bgcolor attribute)\n\n\nTH: highlight cells (align, bgcolor, width attributes)\n\n\nTD: rows (align, bgcolor, width attributes)\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Tables should have at least a first TH row with a width attribute.\n\n\nExample\n\n\nhtml = \n\n\nH1 align=\ncenter\nhtml2fpdf\n/H1\n\n\nh2\nBasic usage\n/h2\n\n\np\nYou can now easily print text mixing different\nstyles : \nB\nbold\n/B\n, \nI\nitalic\n/I\n, \nU\nunderlined\n/U\n, or\n\nB\nI\nU\nall at once\n/U\n/I\n/B\n!\nBR\nYou can also insert links\non text, such as \nA HREF=\nhttp://www.fpdf.org\nwww.fpdf.org\n/A\n,\nor on an image: click on the logo.\nbr\n\n\ncenter\n\n\nA HREF=\nhttp://www.fpdf.org\nimg src=\ntutorial/logo.png\n width=\n104\n height=\n71\n/A\n\n\n/center\n\n\nh3\nSample List\n/h3\n\n\nul\nli\noption 1\n/li\n\n\nol\nli\noption 2\n/li\n/ol\n\n\nli\noption 3\n/li\n/ul\n\n\n\ntable border=\n0\n align=\ncenter\n width=\n50%\n\n\nthead\ntr\nth width=\n30%\nHeader 1\n/th\nth width=\n70%\nheader 2\n/th\n/tr\n/thead\n\n\ntbody\n\n\ntr\ntd\ncell 1\n/td\ntd\ncell 2\n/td\n/tr\n\n\ntr\ntd\ncell 2\n/td\ntd\ncell 3\n/td\n/tr\n\n\n/tbody\n\n\n/table\n\n\n\n\nfrom pyfpdf import FPDF, HTMLMixin\n\nclass MyFPDF(FPDF, HTMLMixin):\n    pass\n\npdf = MyFPDF()\n#First page\npdf.add_page()\npdf.write_html(html)\npdf.output('html.pdf', 'F')\n\n\n\n\nSee html.py or [Web2Py] (../Web2Py.md) for a complete example. \n# TODO fix links\n\n\nSee also\n\n\nwrite\n, \nadd_font\n, \nimage\n.", 
            "title": "write_html"
        }, 
        {
            "location": "/reference/write_html/index.html#write_html", 
            "text": "HTMLMixin.write_html(text: str, image_map = None)", 
            "title": "write_html"
        }, 
        {
            "location": "/reference/write_html/index.html#description", 
            "text": "PyFPDF supports basic HTML, mainly intended to write reports from web frameworks.  It understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below).  HTMLMixin could be used along with FPDF class to implement this functionality (see the example).  Sample:  html.pdf", 
            "title": "Description"
        }, 
        {
            "location": "/reference/write_html/index.html#parameters", 
            "text": "test:   string with HTML markup   image_map:   dictionary with image map", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/write_html/index.html#details", 
            "text": "HTML tags and attributes supported:   H1 to H8: headings (align attribute)  P: paragraphs (align attributes)  B, I, U: bold, italic, underline  FONT: (face, size, color attributes)  CENTER for aligning  A: links (href attribute)  IMG: images (src, width, height attributes)  OL, UL, LI: ordered, unordered and list items (can be nested)  TABLE: (border, width attributes)  THEAD: header (opens each page)  TFOOT: footer (closes each page)  TBODY: actual rows  TR: rows (bgcolor attribute)  TH: highlight cells (align, bgcolor, width attributes)  TD: rows (align, bgcolor, width attributes)       Note: Tables should have at least a first TH row with a width attribute.", 
            "title": "Details"
        }, 
        {
            "location": "/reference/write_html/index.html#example", 
            "text": "html =   H1 align= center html2fpdf /H1  h2 Basic usage /h2  p You can now easily print text mixing different\nstyles :  B bold /B ,  I italic /I ,  U underlined /U , or B I U all at once /U /I /B ! BR You can also insert links\non text, such as  A HREF= http://www.fpdf.org www.fpdf.org /A ,\nor on an image: click on the logo. br  center  A HREF= http://www.fpdf.org img src= tutorial/logo.png  width= 104  height= 71 /A  /center  h3 Sample List /h3  ul li option 1 /li  ol li option 2 /li /ol  li option 3 /li /ul  table border= 0  align= center  width= 50%  thead tr th width= 30% Header 1 /th th width= 70% header 2 /th /tr /thead  tbody  tr td cell 1 /td td cell 2 /td /tr  tr td cell 2 /td td cell 3 /td /tr  /tbody  /table  \n\nfrom pyfpdf import FPDF, HTMLMixin\n\nclass MyFPDF(FPDF, HTMLMixin):\n    pass\n\npdf = MyFPDF()\n#First page\npdf.add_page()\npdf.write_html(html)\npdf.output('html.pdf', 'F')  See html.py or [Web2Py] (../Web2Py.md) for a complete example.  # TODO fix links", 
            "title": "Example"
        }, 
        {
            "location": "/reference/write_html/index.html#see-also", 
            "text": "write ,  add_font ,  image .", 
            "title": "See also"
        }
    ]
}